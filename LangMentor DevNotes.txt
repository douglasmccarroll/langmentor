///// = current work
////  = consider doing before next release
///   = check occasionally...

	  
****************************************************************************************
                                Trouble-shooting
****************************************************************************************

In general
**********
Search ProgNotes.txt for problems that aren't specific to LangMentor.
We need to implement user-friendly error messages. The instructions in this section assume that you're in debug mode. They may also be useful when the time comes to implement user-friendly messages. They provide both use cases and at least some hints as to how to obtain the information that you'll need for user friendly messages.

Lessons not downloading
***********************
Are other lessons downloading from library?
  Yes
    Breakpoint Command_DownloadLibraryInfo.processDownloadedLessonListFilesData(). This is where we decide 
    which lessons to actually download.
  No
    Modify the debug blocks in FileSetDownloader.onDownloadComplete() and FileSetDownloader.onDownloadFailure() 
    and breakpoint them to confirm that the lesson list is downloading. If it is, goto "Yes".




****************************************************************************************
                                    Reference
****************************************************************************************

Callbacks, result() and fault()
*******************************

Our Callbacks class allows us to pass result and fault functions to instances that need to report their results. In cases where a class will clearly either succeed or fail, send both result and fault functions. In many cases the class's results aren't so clearcut, i.e. they may partially succeed but also have some 'problem' info to report. In such cases, the class should be implemented so that it uses (only) the result() function for all reporting of results.

Our Events have a 'callbacks' prop that can be used to pass result and fault functions into Commands. If a result function is passed then the Command's result() method will call the passed function. If a fault function is passed the Command's fault() method will call it. Both of these Command methods can accept and pass on one (optional) argument.

The Event/Command relationship described above is a bit rigid. In some cases we'd like to be able to pass in other types of callbacks, e.g. an update function that the Command can call repeatedly to update the client instance. In these cases (for now) we use the result callback.


Cloud Storage - DreamObjects
****************************
$72/TB/month for both storage and transfer out
Transfer in and API calls are free
Assume:
  50 lessons
  10,000 active users, 1 hour per day, 1.5 auto-downloads per user, so 15,000 auto-downloads
  On average, user turnover & re-downloads cause each user to download all lessons every 6 months
So, 83K lesson downloads each month
English (single language) lessons will average around 1MB, Chinese (dual) around 2MB        <<<<<<<<<<<<<<<<<<<<<<  divide by 4
For English, this would be 83GB/Month, $6
For Chinese, $12
For a million English users, $600/month

Cloud Storage - S3
******************
Storage: $125/TB/month
Transfer: $120/TB
GET requests: $1/million
Assume:
  50 lessons
  10,000 active users, 2 hours per day, 3 auto downloads, total of 30,000 auto-downloads per day, ~1,000,000 per month
  All users turn over or re-download lessons every 4 month - 2500 downloads of all lessons each month
  Lesson files: 3 MB per lesson                                                                                            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< .5 MB per lesson is probably more realistic
    Transfer: 3MB * 50 lessons * 2500 = 400GB                    48.00 month   - This will improve if users select which lessons to download       <<<<<<<<<<<<<<<< 8.00
  Non-lesson info files - 10 files - 1 KB each - 10 KB total
    GET requests: 10M per month                                  10.00 month
	Transfer: 10GB per month                                      1.20 month
  Lesson XML: 6KB per lesson
    Download all each time we auto download:
	  GET requests: 50 lessons * 1M = 10M month                  10.00 month 
	  Transfer: 10M * 6KB = 60GB                                  7.20 month
	Only download when new:                                                    - If users select lessons to download, cost will be between these 2 options
	  GET requests: 50 lessons * 2500 = 125K month                0.12 month
	  Transfer: 125K * 6KB = 750MB month                          0.09 month
Bottom line: Conservatively, each user costs two thirds of a cent per month, or $.08 per year 
  If we get $10/year income from 1/125 of users, this pays for this bandwidth


Commands & Controllers
**********************

The controller responsibilities in LangMentor are shared by Command and Controller classes. Commands are used in most cases. Controllers are singletons and are used when a single, persistent 'manager' is needed, e.g. LessonDownloadController. Controllers are injected into both Command_Base and View_Base, so they can be accessed directly from all views and commands. Controllers can use Commands to do specific tasks.

dispose()
*********
With one exception, we use this pattern in dispose() methods:
            super.dispose();
            if (_isDisposed)
                return;
            _isDisposed = true;
In other words, subclasses and superclasses have their own private _isDisposed prop, and keep track, for themselves, of whether they are disposed or not.
Exception: In classes that use the instance pool pattern, such as AudioSequenceElement subclasses, we have a public isDisposed prop in the root class, but it isn't checked in dispose() methods.
The standard pattern places a premium on efficiency (i.e. avoiding running dispose() when it isn't needed). When we're using the instance pool pattern we put a premium on thoroughness, as dispose() is used to clean up instances that are being deactivated and saved.

Domain Model Changes
********************
sqlite_create_schema.sql
Recreate DB
  build.bat recreates "template file" in \languagementor\src_common\db\
Revise VO classes?
New VO classes?
  Primary storage list
  _index_VOClass_by_primaryStorageListName
  Indexes
Find place(s) in code where VO is created
If creating things that need to be cascade-deleted, this needs to be done 'manually' for SQLite
  For example, see Data.deleteLessonVersion()
Clean project (Flash Builder)
  copies template file to projects /bin-debug/db/ folder
Run / Clear app data

ErrorReport Classes
*******************

Update 20150519: We're starting to move from ErrorReport to TechReport classes. The basic idea here is that it is often the case that the info that we want to report doesn't fall neatly into 'error' or 'success' categories, so it's better to have more general classes that can contain properties that meets the needs of their clients.

Many of our classes have corresponding ErrorReport classes. For example, FileDownloader has a corresponding FileDownloaderErrorReport class. This allows us to pass out detailed error info to client code. The client code may simply pass the info into a Log method, or may add it to its own ErrorReport class and pass the assembled info out to its client.

This works well for getting needed information to our Log methods, which convert these somewhat complex instances into readable, hierarchally formatted strings, and make them available to you, the developer. 

Convention: A class's ErrorReport class should always be named [TheClassName] + "ErrorReport"

Convention: Classes that have corresponding ErrorReport instances should store them in a public 'errorReport' property.

Disposing of ErrorReport instances presents special challenges. It doesn't work to have the 'reported upon' class's dispose() method call its ErrorReport instance's dispose method, because that instance may need to be used after the reported upon class is disposed. Reported upon classes shouldn't dispose their own ErrorReport instances. Instead the reported upon class's dispose() method should simply set "errorReport = null;". ErrorReport classes should be constructed with special attention to avoiding circular references, as we can't assume that their dispose() method will be called. Client code can dispose ErrorReports if you are sure that they won't be needed any more. But, if you're not sure, don't do so - instead rely on normal garbage collection.

When reported upon classes call their fault() callback they should pass their ErrorReport into it. Client code can use the ErrorReport when it is passed to them in this manner, or access the reporteded upon instance's public errorReport prop, or both. The reported upon class doesn't know when its ErrorReport will be used, so it should update it with useful info as it becomes available. 


Font Issues
***********
Fixed a “can’t build font” error that appeared when I moved to Flex 4 by adding "-managers=flash.fonts.AFEFontManager" to compiler args. Can also configure this in flex.config, it appears.


iOS Certificates, Device IDs, etc
*********************************
See section in ProgNotes.txt


Languages & Localization
************************
We use ISO639-3 3-character language codes. 
We can’t use locale resource files for all language-dependent strings, because Flex’s localization allows us to specify only one – ‘local’ – language. LangCollab routinely uses two languages – native and target – so we need a way to say, “get the foo string for currTargetLanguage”, etc. 


Lesson Download Overview
************************

Data structures:
  DownloadLessonProcess
    downloadLessonProcessInfo:DownloadLessonProcessInfo
  DownloadLessonProcessInfo
  DownloadLessonProcessesInfo
    _downloadProcessInfoList:Vector.<DownloadLessonProcessInfo>
  LessonDownloadController
    _downloadLessonProcessesInfo:DownloadLessonProcessesInfo
    lessonDownloadInfo_Repositories:LessonDownloadInfo_Repositories
  LessonDownloadInfo_Lesson
  LessonDownloadInfo_Repositories
    index_repositoryFolderURL_to_lessonDownloadInfo_repository:Dictionary
	  Maps URLs to LessonDownloadInfo_Repository instances
	  These are added to Dict by Command_DownloadRepositoryInfo
  LessonDownloadInfo_Repository
    index_LessonIds_To_LessonDownloadInfo_Lessons:Dictionary
Process:
  Swiz
    LessonDownloadController
      startUpdateAvailableLessonsProcess()
        Command_UpdateAvailableLessonDownloadsInfo
          onLanguageMentorInfoFileDownloadComplete()            // revise - changed and moved into ConfigFileInfo
          onLanguageSpecificInfoFilesDownloadComplete()
          processDownloadedLanguageSpecificInfoFilesData()
	      Command_DownloadLibraryInfo
	        onLibraryFileDownloadComplete()
    	    onLessonListFilesDownloadComplete()
		    processDownloadedLessonListFilesData()
		      Looks at FileSetDownloaderFilesInfo.fileInfoList which contains 0-2 FileSetDownloaderFileInfo instances
		      Passes FileSetDownloaderFileInfo.fileData to validateAndPopulateLessonListXML() 
			  Which sets _lessonListXML_SingleLanguage and/or _lessonListXML_DualLanguage
			  Looks at each <lesson> node
			    Checks LessonDownloadController.isLessonEligibleForDownloading()
			    Creates FileSetDownloaderFileInfo, adds to FileSetDownloaderFilesInfo
			  Creates & starts FileSetDownloader
  		    onLessonFilesDownloadComplete()
		    processDownloadedLessonFilesData()
		      Looks at FileSetDownloaderFilesInfo.fileInfoList which contains FileSetDownloaderFileInfo instances
		      Passes FileSetDownloaderFileInfo.fileData to validateAndPopulateLessonXML()
			  Which adds lessonId and XML to _index_lessonId_to_lessonXML
			  Checks chunk/file consistency
		      Creates LessonDownloadInfo_Lesson instances
		      Stores them in _lessonDownloadInfo_Repository.index_LessonIds_To_LessonDownloadInfo_Lessons
		      Stores _lessonDownloadInfo_Repository in 
		        lessonDownloadController.lessonDownloadInfo_Repositories.index_repositoryFolderURL_to_lessonDownloadInfo_repository
	  startLessonDownloadProcess()
	    Read info from LessonDownloadInfo_Lesson instances to DownloadLessonProcessInfo instances
	    Adds them to _downloadLessonProcessesInfo
	    Adds _downloadLessonProcessesInfo to Event_Download.DOWNLOAD_LESSONS
	  Command_DownloadLessons
	    DownloadLessonProcess
		  Uses "ProcessFunction" methods to avoid doing processor-intensive stuff while audio is playing
		  start()
		  startProcess_LessonFileDownload()
		    FileDownloader
	      startProcess_UnzipFile()
		    FZip
		  onUnzipComplete()
		    Populate _unzippedFileDataList with MP3FileInfo instances
			checkChunkInfoConsistencyAndPopulateLists()
		  startProcess_VersionUpgradeStuff()
			if (LVVOexists && IsNotInCurrLessons)
    		  Command_DeleteLessonVersion
			    delete in DB
			    delete files
			else
			  initProcessFunctionProcess(startProcess_SaveMP3Files);
		  onDeleteLessonVersionComplete()
		    standard on...() stuff
		    initProcessFunctionProcess(startProcess_SaveMP3Files);
		  onDeleteLessonVersionFailure()
		    standard on...() stuff
		    abort
		  startProcess_SaveMP3Files()
		    FileSetMP3Saver
		  startProcess_ExtractMP3FileData()
		    FileSetMP3DataExtractor
		  startProcess_SaveDataToDB()
		    MainModel.insertData()
		  reportComplete()


SVN
***
DreamHost 'private' - standard password
GitHub - ditto?

		
XML Files: Lesson info download process 
***************************************

Notes:
1. We have to distinguish between what information we report to the user, and what authors will want to see. Info that will only be of interest to the latter is added to error reports, then logged as info() in Command_InitLessonDownloader.reportResults(). 
2. At present we simply download all new (undownloaded) lessons. Soon, we'll evolve this...
3. TLC maintains both single and dual language-specific files in order to allow LangMentor to efficiently download all applicable info for a given native-target language pair, but as we look at these files and determine which repositories we should check we don't keep track of which type of lessons - i.e. single and/or dual language - each repository contains. The repositories themselves are the authoritative source for this information. In other words, single and dual language-specific files are divided into single and dual only to improve efficiency, the info they contain is only intended to direct LangMentor to the correct repositories for the user, and LangMentor doesn't really 'think' about single language vs. dual language lessons until it gets to the repositories.
4. When it gets to the repositories it follows the same approach, i.e. the language_mentor_repository.xml file's info is only treated as info on where to look for lessons. The individual lesson XML files are the authoritative source on information regarding whether a lesson is single or dual language.  language_mentor_repository.xml lists single and dual language info separately because we might want to change this approach in the future, and because it improves efficiency slightly but, at least at present, this isn't really necessary - LangMentor could instead simply always look for lesson list files in both types of folder.

Process:
1. Download language_mentor_info.xml
    - If this fails, we probably don't have an internet connection. Abort with user message.
	- If complete, check app version
2. Attempt to download both language_mentor_info_tgt.xml & language_mentor_info_tgt_ntv.xml
    - On complete or failure, call processDownloadedLanguageSpecificInfoFilesData().
    - 'failure' indicates that one or both files weren't successfully downloaded - this may concern us
	  but it shouldn't concern users, so we add info to the error report, but don't report it to the user.
	- At this point we don't worry about whether the user wants single language files or not. Instead, we 
      gather info for all suggested repositories.
    - Use validateAndPopulateLanguageSpecificInfoFileXML_Single() and/or validateAndPopulateLanguageSpecificInfoFileXML_Dual()
      to confirm that XML is valid.
    - If not, don't use data from file; note problem in error report; don't report to user.
    - Combine all suggested repositories - single/dual/user-entered - into one list. We don't need to know which
      repositories have single/dual lessons - that is discovered later. 
3. For each repository, use Command_DownloadRepositoryInfo to do the following:
    a. Download language_mentor_repository.xml
	    - On failure, retry multiple times.
		- If this fails, error report's isFatalProblem is set to true, and we call fault().
	    - Look at its repositoryContentInfo node.
		- See whether repository has content for single and/or dual language lessons for user's target language.
    b. Download lesson_list.xml for single and/or dual
	    - If we're in aaa we look at aaa_lesson_list.xml instead.
		- On complete or failure, call processDownloadedLessonListFilesData().
		- 'failure' indicates that one or both files weren't successfully downloaded - this concerns publishers
		  but not users, so we add info to the error report, but don't report it to the user.
        - Use validateAndPopulateLessonListXML() to confirm that XML is valid.
        - If not, don't use data from file; note problem in error report; don't report to user.
		- If a lesson list contains no lessons, this isn't an error, we simply move on.
    c. Download individual lesson XML files (some.lesson.id.xml) for all lessons that have been identified
        - On complete or failure, call processDownloadedLessonFilesData().
		- 'failure' indicates that one or more files weren't successfully downloaded - this concerns publishers
		  but not users, so we add info to the error report, but don't report it to the user.
        - Use validateAndPopulateLessonXML() to confirm that each file is valid.
        - If not, don't use data from file; note problem in error report; don't report to user.
        - Lesson XML data that is successfully downloaded and parsed is added to model.lessonDownloadInfo_Repositories.
        - If no problems, result(); otherwise fault().
    d. If command times out, problem is noted in error report and fault() is called.
4. As each Command_DownloadRepositoryInfo reports:
    a. On complete or failure:
        - We note information on success, failure, etc.
        - We call checkIfDone().
    b. checkIfDone() sees if all Command_DownloadRepositoryInfos have reported, if so it calls reportResults().
    c. onTimeoutTimerComplete() also calls reportResults().
    d. reportResults() calls fault() if there have been any problems (even those we won't report to users); otherwise result().
    


XML Files: language_mentor_info.xml
***********************************
 
Are we concerned about bandwidth? I don't think so. If we have ten million active users who re-download language_mentor_info.xml once a week, and language_mentor_info.xml is 100K (it's currently 2K), this amounts to 1 GB of data per week. Lessons are, by far, the bigger problem.

We'll only be downloading one language_mentor_info.xml file for now, but should design domain to handle multiple language_mentor_info.xml sources.
The Language Collaborative's language_mentor_info.xml file will be the authoritative source on language info (at least for now), but we need to allow other sources to provide this data.

Some table(s) should have an infoSource field.

We may want to allow users to specify which infoSource is authoritative.

           
