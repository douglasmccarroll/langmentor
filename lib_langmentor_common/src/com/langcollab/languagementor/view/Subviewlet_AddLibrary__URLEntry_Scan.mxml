<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2008 - 2013 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:Subviewlet_AddLibrary__URLEntry_Base xmlns:fx="http://ns.adobe.com/mxml/2009"
                                           xmlns:s="library://ns.adobe.com/flex/spark"
                                           xmlns:button="com.brightworks.component.button.*"
                                           xmlns:uiwidget="com.langcollab.languagementor.component.uiwidget.*"
                                           xmlns:view="com.langcollab.languagementor.view.*"
                                           show="onShow()">

    <fx:Declarations>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
        import com.brightworks.util.Log;
        import com.brightworks.util.Utils_Layout;
        import com.brightworks.util.Utils_NativeExtensions;
        import com.brightworks.util.Utils_URL;

        private static const _SCAN_BUTTON_LABEL__SCAN_AGAIN:String = "Scan Again";
        private static const _SCAN_BUTTON_LABEL__SCAN_ANOTHER:String = "Scan Another";
        private static const _SCAN_BUTTON_LABEL__START_SCAN:String = "Start Scan";

        private var _isDisposed:Boolean;


        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //
        //          Public Methods
        //
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        override public function dispose():void {
            super.dispose();
            if (_isDisposed)
                return;
            _isDisposed = true;
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //
        //          Protected Methods
        //
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        override protected function displayAddURLResult(resultText:String):void {
            feedbackTextWidget.text = resultText;
            if (resultText == SUCCESS_REPORT__LIBRARY_ADDED)
                scanButton.label = _SCAN_BUTTON_LABEL__SCAN_ANOTHER;
            else
                scanButton.label = _SCAN_BUTTON_LABEL__SCAN_AGAIN;
        }

        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        //
        //          Private Methods
        //
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        private function onScan(scannedString:String):void {
            if (Utils_URL.isUrlProperlyFormed(scannedString)) {
                feedbackTextWidget.text = "Adding library. Please wait...";
                startAddLibraryProcess(scannedString);
                startBusyIndicator();
            }
            else {
                feedbackTextWidget.text = "QR Code doesn't contain a valid URL. (Retrieved: " + '"' + scannedString + '")';
                scanButton.label = _SCAN_BUTTON_LABEL__SCAN_AGAIN;
            }
        }

        private function onScanButtonClick():void {
            Log.info("Subviewlet_AddLibrary__URLEntry_Scan.onScanButtonClick()");
            Utils_NativeExtensions.activateCodeScanner(Math.round(width * .9), onScan);
        }

        private function onShow():void {
            feedbackTextWidget.text = "";
        }
        ]]>
    </fx:Script>

    <s:Scroller horizontalScrollPolicy = "off"
                skinClass = "com.brightworks.component.scroll.InitialFadeScrollerSkin"
                height = "100%"
                width = "{width}">
        <s:VGroup height = "100%"
                  width = "100%"
                  horizontalAlign = "center"
                  paddingLeft = "{Utils_Layout.getStandardPadding() * 2}"
                  paddingRight = "{Utils_Layout.getStandardPadding() * 2}">
            <s:VGroup width = "100%"
                      height = "100%"
                      paddingLeft = "{Utils_Layout.getStandardPadding()}"
                      paddingRight = "{Utils_Layout.getStandardPadding()}">
                <uiwidget:UIWidget_Viewlet__Heading id = "feedbackTextWidget"
                                                    height = "100%"
                                                    width = "100%" />
            </s:VGroup>
            <s:Spacer />
            <s:Spacer />
            <button:NormalButton id = "scanButton"
                                 label = "Start Scan"
                                 click = "onScanButtonClick()"
                                 width = "75%" />
            <s:Spacer />
            <s:Spacer />
            <s:Spacer />
            <s:Spacer />
        </s:VGroup>
    </s:Scroller>
</view:Subviewlet_AddLibrary__URLEntry_Base>
