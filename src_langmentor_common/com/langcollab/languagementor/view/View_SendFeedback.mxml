<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2020 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base_BottomButtons xmlns:fx = "http://ns.adobe.com/mxml/2009"
                              xmlns:view = "com.langcollab.languagementor.view.*"
                              creationComplete = "onCreationComplete()"
                              initialize = "onInitialize()"
                              title = "Report Problem">

   <fx:Declarations>
   </fx:Declarations>

   <fx:Script>
        <![CDATA[
      import com.brightworks.constant.Constant_PlatformName;
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_System;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Heading;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Text;
      import com.langcollab.languagementor.constant.Constant_LangMentor_Misc;
      import com.langcollab.languagementor.constant.Constant_MentorTypeSpecific;
      import com.langcollab.languagementor.constant.Constant_MentorTypeSpecific;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;

      import mx.controls.Spacer;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;

      import spark.components.TextArea;
      import spark.components.ViewMenuItem;

      private static const _BUTTON_LABEL__CLOSE:String = "Close App";
      private static const _BUTTON_LABEL__SEND_FEEDBACK:String = "Send Feedback";
      private static const _HEADING__FATAL_ERROR:String = "We're sorry - " + Constant_MentorTypeSpecific.APP_NAME__SHORT + " has encountered a problem";
      private static const _HEADING__THANKS_FOR_YOUR_FEEDBACK:String = "Thanks for your feedback!";
      private static const _MESSAGE__INITIAL__CLOSING_DUE_TO_FATAL_ERROR:String = "Please restart the application.\n\nDiagnostic data will be sent to us to help us prevent this problem in future versions of " + Constant_MentorTypeSpecific.APP_NAME__SHORT + ". Could you take a few moments and provide a brief description of what you were doing within this app when this problem occurred?\n\nThanks!";
      private static const _MESSAGE__INITIAL__PLEASE_SEND:String = "We look forward to reading your feedback. If you'd like a response, please include your name and email address.";
      private static const _MESSAGE__ONCLICK__CLOSING_APP_ANDROID:String = "Closing...";
      private static const _MESSAGE__ONCLICK__CLOSING_APP_IOS:String = "Closing... \n\nIf " + Constant_MentorTypeSpecific.APP_NAME__SHORT + " doesn't close on it's own, you can close it by pressing your phone's home button twice in quick succession, then swiping upward on " + Constant_MentorTypeSpecific.APP_NAME__SHORT + ".";
      private static const _MESSAGE__ONCLICK__CLOSING_APP_UNKNOWN_PLATFORM:String = "Closing...";
      private static const _MESSAGE__ONCLICK__SENDING_REPORT:String = "Sending Feedback";
      private static const _MESSAGE__LOG_RESULT__COMPLETE:String = "Your feedback has been sent.";
      private static const _MESSAGE__LOG_RESULT__FAILURE:String = "We're sorry, Language Mentor is unable to send your feedback. Please ensure that your device is connected to the Internet and try again. If you continue to encounter this problem " + Constant_LangMentor_Misc.MESSAGE__CONTACT_US;

      private var _headingWidget:UIWidget_Viewlet__Heading;
      private var _isDisposed:Boolean = false;
      private var _isLogAttemptDone:Boolean;
      private var _messageTextWidget:UIWidget_Viewlet__Text;
      private var _userCommentTextArea:TextArea;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override protected function onAddedToStage(event:Event = null):void {
         super.onAddedToStage();
         removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
         stage.autoOrients = true;
      }

      override protected function onActionBarDoubleClick(event:MouseEvent):void {
         var ctxt:ViewContext = new ViewContext(ViewContext.CONTEXT_TYPE__SEND_FEEDBACK);
         navigator.pushView(View_Diagnostics, null, ctxt, transition_SlideView_Left);
      }

      override protected function onPrimaryBottomButtonClick(event:MouseEvent):void {
         Log.info("View_SendProblemReport.onPrimaryBottomButtonClick()");
         if (_isLogAttemptDone) {
            doGoBack();
         } else {
            primaryBottomButton.enabled = false;
            _userCommentTextArea.enabled = false;
            var messageText:String;
            if (isInFatalErrorMode()) {
               if (Utils_System.isAndroid()) {
                  messageText = _MESSAGE__ONCLICK__CLOSING_APP_ANDROID;
               } else if (Utils_System.isIOS()) {
                  messageText = _MESSAGE__ONCLICK__CLOSING_APP_IOS;
               } else {
                  messageText = _MESSAGE__ONCLICK__CLOSING_APP_UNKNOWN_PLATFORM;
               }
            } else {
               messageText = _MESSAGE__ONCLICK__SENDING_REPORT;
               startBusyIndicator();
            }
            _messageTextWidget.text = messageText;
            Log.userInitiatedLogToServer(createUserMessage(), logErrorCallback);
         }
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function createUserMessage():String {
         var result:String;
         if ((_userCommentTextArea.text) && (_userCommentTextArea.text.length > 0))
            result = _userCommentTextArea.text;
         else
            result = "User sent report, but entered no message.";
         result = " ---------- " + result + " ---------- ";
         return result;
      }

      private function isInFatalErrorMode():Boolean {
         return (contextType == ViewContext.CONTEXT_TYPE__FATAL_ERROR);
      }

      private function logErrorCallback(success:Boolean):void {
         primaryBottomButton.enabled = true;
         primaryBottomButton.label = BUTTON_LABEL__OK;
         _isLogAttemptDone = true;
         if (isInFatalErrorMode()) {
            if (!Utils_System.isRunningOnDesktop())
               currentLessons.stopPlayingCurrentLessonVersionIfPlaying();
            NativeApplication.nativeApplication.exit();  // This has no effect on iOS
         } else {
            if (success) {
               _messageTextWidget.text = _MESSAGE__LOG_RESULT__COMPLETE;
            } else {
               _messageTextWidget.text = _MESSAGE__LOG_RESULT__FAILURE
            }
         }
         stopBusyIndicator();
      }

      private function onCreationComplete():void {
         if (isInFatalErrorMode())
            primaryBottomButton.label = _BUTTON_LABEL__CLOSE;
         else
            primaryBottomButton.label = _BUTTON_LABEL__SEND_FEEDBACK;
         _headingWidget = new UIWidget_Viewlet__Heading();
         _headingWidget.text =
               (contextType == ViewContext.CONTEXT_TYPE__FATAL_ERROR) ?
                     _HEADING__FATAL_ERROR :
                     _HEADING__THANKS_FOR_YOUR_FEEDBACK;
         viewletGroup.addElement(_headingWidget);
         viewletGroup.addElement(new Spacer());
         _messageTextWidget = new UIWidget_Viewlet__Text();
         if (isInFatalErrorMode())
            _messageTextWidget.text = _MESSAGE__INITIAL__CLOSING_DUE_TO_FATAL_ERROR;
         else
            _messageTextWidget.text = _MESSAGE__INITIAL__PLEASE_SEND;
         viewletGroup.addElement(_messageTextWidget);
         viewletGroup.addElement(new Spacer());
         viewletGroup.addElement(new Spacer());
         _userCommentTextArea = new TextArea();
         _userCommentTextArea.percentWidth = 100;
         _userCommentTextArea.height = Math.round(Capabilities.screenResolutionY / 5);
         _userCommentTextArea.editable = true;
         viewletGroup.addElement(_userCommentTextArea);
      }

      private function onInitialize():void {
         if (isInFatalErrorMode())
            navigationContent = [];
      }
      ]]>
    </fx:Script>
</view:View_Base_BottomButtons>
