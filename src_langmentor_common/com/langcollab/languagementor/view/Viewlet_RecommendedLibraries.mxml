<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2020 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:Viewlet_Base xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:checkbox="com.brightworks.component.checkbox.*"
                   xmlns:uiwidget="com.langcollab.languagementor.component.uiwidget.*"
                   xmlns:view="com.langcollab.languagementor.view.*"
                   creationComplete="onCreationComplete()"
                   implements="com.brightworks.interfaces.IDisposable"
                   initialize="onInitialize()">

   <fx:Metadata>
      [Event(name="complete", type="flash.events.Event")]
   </fx:Metadata>

   <fx:Script>
        <![CDATA[
      import com.brightworks.event.BwEvent;
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_ArrayVectorEtc;
      import com.brightworks.util.Utils_Timer;
      import com.langcollab.languagementor.constant.Constant_MentorTypeSpecific;
      import com.langcollab.languagementor.model.LessonDownloadInfo_Library;

      private static const INDENT:String = "    ";

      public var displayRecommendedLibrariesHeading:Boolean = true;
      [Bindable]
      public var displayContents:Boolean = false;

      private var _isDisposed:Boolean;
      [Bindable]
      private var _useRecommendedLibraries:Boolean;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
         lessonDownloadController.removeEventListener(BwEvent.NEW_INFO, onLessonDownloadsNewInfo);
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function isLibraryUserEntered(libraryInfo:LessonDownloadInfo_Library):Boolean {
         /// This is a bit of a kludge - at present it is true that all user-entered libraries are
         //   in the DB, and no non-user-entered (aka recommended) libraries are in the DB, but this
         //   may change. LibraryVO may need a new 'isUserEntered' prop.
         return model.isLibraryWithLibraryURLExists(libraryInfo.libraryFolderUrl);
      }

      private function onCreationComplete():void {
         Log.debug("Viewlet_AutomaticDownloads.onCreationComplete()");
         _useRecommendedLibraries = model.useRecommendedLibraries;
         lessonDownloadController.addEventListener(BwEvent.NEW_INFO, onLessonDownloadsNewInfo);
         if (model.doesCurrentTargetLanguageHaveRecommendedLibraries() &&
               (!(lessonDownloadController.isUpdateAvailableLessonDownloadsProcessActive || lessonDownloadController.isLessonDownloadProcessActive))) {
            lessonDownloadController.startGetRecommendedLibrariesInfoProcess();
         }
      }

      private function onInitialize():void {
         updateUI();
      }

      private function onLessonDownloadsNewInfo(event:BwEvent):void {
         updateUI();
      }

      private function onUseRecommendedLibrariesCheckboxChange(event:Event):void {
         startBusyIndicator();
         Utils_Timer.callLater(onUseRecommendedLibrariesCheckboxChange_Continued, 200);
      }

      private function onUseRecommendedLibrariesCheckboxChange_Continued():void {
         _useRecommendedLibraries = model.useRecommendedLibraries = useRecommendedLibrariesCheckbox.selected;
         stopBusyIndicator();
      }

      private function updateUI():void {
         if (model.doesCurrentTargetLanguageHaveRecommendedLibraries()) {
            explanationText.text = "If this option is selected, " + Constant_MentorTypeSpecific.APP_NAME__SHORT + " will use the libraries listed below.";
            if (lessonDownloadController.recommendedLibraryNameList.length == 0) {
               resultsText.text = "Searching for recommended libraries...";
               startBusyIndicator();
            } else {
               stopBusyIndicator();
               var recommendedLibraryCount:int = 0;
               var text:String = "";
               for each (var libraryName:String in lessonDownloadController.recommendedLibraryNameList) {
                  recommendedLibraryCount++;
                  text += INDENT + recommendedLibraryCount + ": " + libraryName + "\n";
               }
               resultsText.text = text;
            }
         } else {
            var displayText:String = "";
            displayText += "We're sorry, but " + Constant_MentorTypeSpecific.APP_NAME__SHORT + " does not currently recommend any libraries for ";
            displayText += model.getCurrentTargetLanguageDisplayName_InCurrentNativeLanguage();
            displayText += ". If you'd like to suggest a library, or are interested in creating a library for " + Constant_MentorTypeSpecific.APP_NAME__SHORT;
            displayText += ", please contact us at " + Constant_MentorTypeSpecific.APP_OWNER_WEBSITE_URL + ".";
            explanationText.text = displayText;
            useRecommendedLibrariesCheckbox.enabled = false;
            useRecommendedLibrariesCheckbox.visible = false;
            useRecommendedLibrariesCheckbox.includeInLayout = false;
            resultsText.text = "";
         }
         invalidateDisplayList();
      }
      ]]>
    </fx:Script>

   <s:VGroup horizontalAlign="left"
             height="100%"
             width="100%">
      <s:VGroup visible="true"
                includeInLayout="true"
                width="100%">
         <checkbox:NormalCheckBox id="useRecommendedLibrariesCheckbox"
                                  label="Use Recommended Libraries"
                                  change="onUseRecommendedLibrariesCheckboxChange(event)"
                                  selected="{_useRecommendedLibraries}"/>
         <s:Spacer/>
         <uiwidget:UIWidget_Viewlet__Text id="explanationText"/>
         <s:Spacer/>
         <s:Spacer/>
         <uiwidget:UIWidget_Viewlet__Text id="resultsText"
                                          text=""
                                          fontFamily="_sans"
                                          height="50%"
                                          width="100%"/>
      </s:VGroup>
   </s:VGroup>
</view:Viewlet_Base>





















