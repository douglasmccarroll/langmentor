<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2008 - 2013 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base_BottomButtons xmlns:fx = "http://ns.adobe.com/mxml/2009"
                              xmlns:view = "com.langcollab.languagementor.view.*"
                              creationComplete = "onCreationComplete()"
                              title = "New Downloads">

   <fx:Declarations>
   </fx:Declarations>

   <fx:Script>
      <![CDATA[
      import com.brightworks.util.Log;
      import com.langcollab.languagementor.component.uiwidget.IUIWidget_Text;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Bold_Text;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Bullet_Text;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Heading;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Text;
      import com.langcollab.languagementor.controller.lessondownload.DownloadLessonProcessInfo;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;

      import mx.collections.ArrayCollection;
      import mx.collections.Sort;
      import mx.controls.Spacer;

      import spark.collections.SortField;

      private static const _INDENT:String = "    ";

      private var _isDisposed:Boolean = false;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
      }

      override public function doGoBack():void {
         Log.info("View_NewDownloads.doGoBack()");
         if (contextType == ViewContext.CONTEXT_TYPE__MAIN_SCREEN_LINK_BUTTON)
            navigator.pushView(View_Home, null, null, transition_SlideView_Left);
         else
            super.doGoBack();
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override protected function onPrimaryBottomButtonClick(event:MouseEvent):void {
         Log.info("View_NewDownloads.onPrimaryBottomButtonClick()");
         if (contextType == ViewContext.CONTEXT_TYPE__MAIN_SCREEN_LINK_BUTTON)
            navigator.pushView(View_Home, null, null, transition_SlideView_Left);
         else
            super.onPrimaryBottomButtonClick(event);
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function createInfoDict(infoList:Array, sortedLibraryNameList:ArrayCollection):Dictionary {
         var sortedInfoList:ArrayCollection = new ArrayCollection(infoList);
         var sort:Sort = new Sort();
         sort.fields = [new SortField("nativeLanguageLessonSortName")];
         sortedInfoList.sort = sort;
         sortedInfoList.refresh();
         var result:Dictionary = new Dictionary();
         var lessonNameList:ArrayCollection;
         for each (var libName:String in sortedLibraryNameList) {
            lessonNameList = new ArrayCollection();
            result[libName] = lessonNameList;
         }
         for each (var info:DownloadLessonProcessInfo in sortedInfoList) {
            lessonNameList = result[info.nativeLanguageLibraryName];
            lessonNameList.addItem(info.nativeLanguageLessonName)
         }
         return result;
      }

      private function createSortedLibraryNameList(infoList:Array):ArrayCollection {
         var result:ArrayCollection = new ArrayCollection();
         for each (var info:DownloadLessonProcessInfo in infoList) {
            if (!result.contains(info.nativeLanguageLibraryName)) {
               result.addItem(info.nativeLanguageLibraryName);
            }
         }
         var sort:Sort = new Sort();
         sort.fields = [new SortField()];
         result.sort = sort;
         result.refresh();
         return result;
      }

      private function displayLibraryAndLessonInfo(infoList:Array):void {
         var widget:IUIWidget_Text;
         var sortedLibraryNameList:ArrayCollection = createSortedLibraryNameList(infoList);
         var sortedInfoDict:Dictionary = createInfoDict(infoList, sortedLibraryNameList);
         for each (var libName:String in sortedLibraryNameList) {
            widget = new UIWidget_Viewlet__Bold_Text();
            widget.text = libName;
            viewletGroup.addElement(widget);
            viewletGroup.addElement(new Spacer());
            var lessonNameList:ArrayCollection = sortedInfoDict[libName];
            for each (var lessonName:String in lessonNameList) {
               widget = new UIWidget_Viewlet__Bullet_Text();
               widget.text = lessonName;
               viewletGroup.addElement(widget);
            }
            viewletGroup.addElement(new Spacer());
         }
         viewletGroup.addElement(new Spacer());
      }

      private function onCreationComplete():void {
         var widget:IUIWidget_Text;
         if (lessonDownloadController.successfulDownloadInfoList_NewDownloads.length > 0) {
            widget = new UIWidget_Viewlet__Heading();
            widget.text = "New Lessons";
            viewletGroup.addElement(widget);
            viewletGroup.addElement(new Spacer());
            widget = new UIWidget_Viewlet__Text();
            widget.text = "Language Mentor has downloaded these new lessons. For a complete listing of downloaded lessons please see the Select Lessons screen.";
            viewletGroup.addElement(widget);
            viewletGroup.addElement(new Spacer());
            displayLibraryAndLessonInfo(lessonDownloadController.successfulDownloadInfoList_NewDownloads);
         }
         if (lessonDownloadController.successfulDownloadInfoList_Updates.length > 0) {
            widget = new UIWidget_Viewlet__Heading();
            widget.text = "Updated Lessons";
            viewletGroup.addElement(widget);
            viewletGroup.addElement(new Spacer());
            widget = new UIWidget_Viewlet__Text();
            widget.text = "Language Mentor has updated these lessons.";
            viewletGroup.addElement(widget);
            viewletGroup.addElement(new Spacer());
            displayLibraryAndLessonInfo(lessonDownloadController.successfulDownloadInfoList_Updates);
         }


      }
      ]]>
   </fx:Script>
</view:View_Base_BottomButtons>
