<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                xmlns:s = "library://ns.adobe.com/flex/spark"
                xmlns:text = "com.brightworks.component.text.*"
                xmlns:view = "com.langcollab.languagementor.view.*"
                title = "Play Lessons"
                initialize = "onInitialize()"
                preinitialize = "onPreinitialize()"
                viewActivate = "onViewActivate()"
                viewDeactivate = "onViewDeactivate()">

   <fx:Script>
        <![CDATA[
      import com.brightworks.base.Callbacks;
      import com.brightworks.constant.Constant_AudioModeConfig;
      import com.brightworks.constant.Constant_PlatformName;
      import com.brightworks.util.Utils_ANEs;
      import com.brightworks.util.audio.Utils_Audio_Files;
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_AIR;
      import com.brightworks.util.Utils_DateTime;
      import com.brightworks.util.Utils_System;
      import com.brightworks.util.Utils_Text;
      import com.langcollab.languagementor.component.button.Button_Standard;
      import com.langcollab.languagementor.component.button.Button_Toggle_Standard;
      import com.langcollab.languagementor.constant.Constant_AppConfiguration;
      import com.langcollab.languagementor.constant.Constant_LearningModeLabels;
      import com.langcollab.languagementor.constant.Constant_MentorTypeSpecific;
      import com.langcollab.languagementor.constant.Constant_TextDisplayTypeNames;
      import com.langcollab.languagementor.controller.Command_DoIKnowThis;
      import com.brightworks.util.audio.AudioPlayer;
      import com.langcollab.languagementor.controller.audio.AudioRecorder;
      import com.langcollab.languagementor.util.Resources_Image;
      import com.langcollab.languagementor.vo.ChunkVO;
      import com.langcollab.languagementor.vo.LessonVersionVO;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;

      import mx.binding.utils.BindingUtils;
      import mx.binding.utils.ChangeWatcher;
      import mx.core.FlexGlobals;
      import mx.core.UIComponent;

      private static const _ALERT_MESSAGE__ALL_LESSONS_LEARNED:String = "Congratulations - you've learned all chunks in all selected lessons. Would you like to select more lessons?";
      private static const _BUTTON_LABEL__CREDITS:String = "Credits";
      private static const _BUTTON_LABEL__I_KNOW_THIS:String = "I Know\nThis!";
      private static const _BUTTON_LABEL__LOOP:String = "Loop";
      private static const _BUTTON_LABEL__NEXT_CHUNK:String = ">";
      private static const _BUTTON_LABEL__NEXT_LESSON:String = ">>";
      private static const _BUTTON_LABEL__PAUSE:String = "Pause";
      private static const _BUTTON_LABEL__PLAY:String = "Play";
      private static const _BUTTON_LABEL__PREVIOUS_CHUNK:String = "<";
      private static const _BUTTON_LABEL__PREVIOUS_LESSON:String = "<<";
      private static const _BUTTON_LABEL__RECORD:String = "Record &\nPlayback";
      private static const _BUTTON_LABEL__TRANSLATE:String = "Trans\nlate";
      private static const _CHUNK_START_I_KNOW_THIS_ABORT_TIME:Number = 2000;
      private static const _TEXT_DISPLAY_MODE__NATIVE_TEXT:String = "TEXT_DISPLAY_MODE__NATIVE_TEXT";
      private static const _TEXT_DISPLAY_MODE__NONE:String = "TEXT_DISPLAY_MODE__NONE";
      private static const _TEXT_DISPLAY_MODE__TARGET_TEXT:String = "TEXT_DISPLAY_MODE__TARGET_TEXT";
      private static const _TEXT_DISPLAY_MODE__TARGET_TEXT_PHONETIC:String = "TEXT_DISPLAY_MODE__TARGET_TEXT_PHONETIC";

      private var _button_Credits:Button_Standard;
      private var _button_IKnowThis:Button_Standard;
      private var _button_Loop:Button_Toggle_Standard;
      private var _button_NextChunk:Button_Standard;
      private var _button_NextLesson:Button_Standard;
      private var _button_PlayPause:Button_Standard;
      private var _button_PreviousChunk:Button_Standard;
      private var _button_PreviousLesson:Button_Standard;
      private var _button_Record:Button_Toggle_Standard;
      private var _button_Translate:Button_Standard;
      [Bindable]
      private var _columnWidth:int;
      private var _currentLessonsLengthDirty:Boolean = false;
      [Bindable]
      private var _currentTextDisplayMode:String = _TEXT_DISPLAY_MODE__NONE;
      private var _index_dialogOptionIndexes_to_textDisplayMode:Dictionary;
      private var _isDisposed:Boolean = false;
      //// alpha mode private var _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge:Boolean;
      private var _mostRecentUserActionTime:Number;
      private var _mostRecentUserInitiatedChunkNavigationTime:Number;
      private var _mostRecentUserInitiatedIKnowThisTime:Number;
      private var _timer_ShowHideMicrophoneImage:Timer;
      private var _watcher_CurrentChunkIndex:ChangeWatcher;
      private var _watcher_IsCurrentlyRecording:ChangeWatcher;
      private var _watcher_IsRecordMode:ChangeWatcher;
      private var _watcher_MostRecentDownloadLessonProcessStatus:ChangeWatcher;
      private var _watcher_SelectedLessonVersionsDataLength:ChangeWatcher;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Getters / Setters
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      public function get buttonList():Array {
         return [_button_Credits, _button_IKnowThis, _button_Loop, _button_NextChunk, _button_NextLesson, _button_PreviousChunk, _button_PreviousLesson, _button_Record, _button_Translate];
      }

      public function get buttonList_ArrowButtons():Array {
         return [_button_NextChunk, _button_NextLesson, _button_PreviousChunk, _button_PreviousLesson];
      }

      public function get buttonList_TextButtons():Array {
         return [_button_Credits, _button_IKnowThis, _button_Loop, _button_Record, _button_Translate];
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         _index_dialogOptionIndexes_to_textDisplayMode = null;
         if (_isDisposed)
            return;
         _isDisposed = true;
         Utils_AIR.keepSystemAwake(false);
         if (_timer_ShowHideMicrophoneImage) {
            _timer_ShowHideMicrophoneImage.stop();
            _timer_ShowHideMicrophoneImage.removeEventListener(TimerEvent.TIMER, showHideMicrophoneImage);
            _timer_ShowHideMicrophoneImage = null;
         }
         if (_watcher_CurrentChunkIndex) {
            _watcher_CurrentChunkIndex.unwatch();
            _watcher_CurrentChunkIndex = null;
         }
         if (_watcher_IsCurrentlyRecording) {
            _watcher_IsCurrentlyRecording.unwatch();
            _watcher_IsCurrentlyRecording = null;
         }
         if (_watcher_IsRecordMode) {
            _watcher_IsRecordMode.unwatch();
            _watcher_IsRecordMode = null;
         }
         if (_watcher_MostRecentDownloadLessonProcessStatus) {
            _watcher_MostRecentDownloadLessonProcessStatus.unwatch();
            _watcher_MostRecentDownloadLessonProcessStatus = null;
         }
         if (_watcher_SelectedLessonVersionsDataLength) {
            _watcher_SelectedLessonVersionsDataLength.unwatch();
            _watcher_SelectedLessonVersionsDataLength = null;
         }
      }

      override public function doGoBack():void {
         Log.info("View_PlayLessons.doGoBack()");
         doGoHome();
      }

      override public function doGoHome():void {
         Log.info("View_PlayLessons.doGoHome()");
         AudioPlayer.getInstance().stop();
         textField_ChunkText.text = "";
         AudioPlayer.getInstance().stop();
         if (audioController)
            callLater(currentLessons.stopPlayingCurrentLessonVersionIfPlaying); // Using callLater() improves perceived responsiveness - the app briefly becomes unresponsive in the Home screen, rather than hesitating before going there
         navigator.pushView(View_Home, null, null, transition_SlideView_Up);
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override protected function createChildren():void {
         Log.debug("View_PlayLessons.createChildren()");
         super.createChildren();
         group_CreditsButton.addElement(_button_Credits);
         group_IKnowThisButton.addElement(_button_IKnowThis);
         group_LoopButton.addElement(_button_Loop);
         group_NextChunkButton.addElement(_button_NextChunk);
         group_NextLessonButton.addElement(_button_NextLesson);
         group_PlayPauseButton.addElement(_button_PlayPause);
         group_PreviousChunkButton.addElement(_button_PreviousChunk);
         group_PreviousLessonButton.addElement(_button_PreviousLesson);
         group_RecordAndTranslateButtons.addElement(_button_Record);
         group_RecordAndTranslateButtons.addElement(_button_Translate);
         Log.debug("View_PlayLessons.createChildren(): finished");
      }

      override protected function onCustomGesture_Arrow_Down():void {
      }

      override protected function onCustomGesture_Arrow_Left():void {
      }

      override protected function onCustomGesture_Arrow_Right():void {
      }

      override protected function onCustomGesture_Arrow_Up():void {
      }

      override protected function onCustomGesture_SwipeDown():void {
      }

      override protected function onCustomGesture_SwipeDownLeft():void {
      }

      override protected function onCustomGesture_SwipeDownRight():void {
      }

      override protected function onCustomGesture_SwipeLeft():void {
         Log.info("View_PlayLessons.onCustomGesture_SwipeLeft()");
         onDo_NextChunk();
      }

      override protected function onCustomGesture_SwipeRight():void {
         Log.info("View_PlayLessons.onCustomGesture_SwipeRight()");
         onDo_PreviousChunk();
      }

      override protected function onCustomGesture_SwipeUp():void {
         Log.info("View_PlayLessons.onCustomGesture_SwipeUp()");
         doGoBack();
      }

      override protected function onCustomGesture_SwipeUpLeft():void {
         Log.info("View_PlayLessons.onCustomGesture_SwipeUpLeft()");
         onDo_NextLesson();
      }

      override protected function onCustomGesture_SwipeUpRight():void {
         Log.info("View_PlayLessons.onCustomGesture_SwipeUpRight()");
         onDo_PreviousLesson();
      }

      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
         super.updateDisplayList(unscaledWidth, unscaledHeight);
         if (_currentLessonsLengthDirty) {
            _currentLessonsLengthDirty = false;
            processCurrentLessonsLengthChange();
         }
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function currentlyInIKnowThisWaitInterval():Boolean {
         if (_mostRecentUserInitiatedIKnowThisTime == 0)
            return false;
         return ((Utils_DateTime.getCurrentMS_BasedOnDate() - _mostRecentUserInitiatedIKnowThisTime) <= Constant_AppConfiguration.I_KNOW_THIS_REQUIRED_WAIT_INTERVAL)
      }

      private function currentlyInUserActionRequiredWaitInterval():Boolean {
         if (_mostRecentUserActionTime == 0)
            return false;
         return ((Utils_DateTime.getCurrentMS_BasedOnDate() - _mostRecentUserActionTime) <= Constant_AppConfiguration.USER_ACTION_REQUIRED_WAIT_INTERVAL)
      }

      private function onButtonClick_Credits(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_Credits()");
         onDo_Credits();
      }

      private function onButtonClick_IKnowThis(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_IKnowThis()");
         onDo_IKnowThis();
      }

      private function onButtonClick_Loop(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_Loop()");
         onDo_Loop();
      }

      private function onButtonClick_NextChunk(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_NextChunk()");
         onDo_NextChunk();
      }

      private function onButtonClick_NextLesson(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_NextLesson()");
         onDo_NextLesson();
      }

      private function onButtonClick_PlayPause(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_PlayPause()");
         onDo_PlayPause();
      }

      private function onButtonClick_Record(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_Record()");
         onDo_Record();
      }

      private function onButtonClick_PreviousChunk(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_PreviousChunk()");
         onDo_PreviousChunk();
      }

      private function onButtonClick_PreviousLesson(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_PreviousLesson()");
         onDo_PreviousLesson();
      }

      private function onButtonClick_Translate(event:MouseEvent):void {
         Log.info("View_PlayLessons.onButtonClick_Translate()");
         onDo_Translate();
      }

      private function onChunkTextTextFieldClick():void {
         var isNativeTextAvailable:Boolean = model.isAppDualLanguage();
         var isTargetPhoneticTextAvailable:Boolean;
         var hasPhoneticTextValueFromLanguageResourceFile_IfSpecified:String = model.getTargetLanguageResource(["hasPhoneticText"]);
         if (hasPhoneticTextValueFromLanguageResourceFile_IfSpecified) {
            isTargetPhoneticTextAvailable = (hasPhoneticTextValueFromLanguageResourceFile_IfSpecified == "true");
         }
         var availableTextModeCount:uint = 1; // We start with 1 because target language text is always available
         if (isNativeTextAvailable)
               availableTextModeCount++;
         if (isTargetPhoneticTextAvailable)
               availableTextModeCount++;
         if (availableTextModeCount == 1) {
            // We do nothing - there is no other text mode for the user to switch to
            return;
         }
         _index_dialogOptionIndexes_to_textDisplayMode = new Dictionary();
         var dialogOptionList:Array = [];
         var currentIndex:uint = 0;
         if (isTargetPhoneticTextAvailable) {
            var textDisplayModeDisplayName_TargetLanguagePhonetic:String = model.getTargetLanguageResource(["languageSpecificDisplayStrings", model.getNativeLanguageIso639_3Code(), "displayModeName_targetLanguagePhonetic"]);
            if (!textDisplayModeDisplayName_TargetLanguagePhonetic) {
               // If we haven't specified a display name for phonetic texxt in the target language's language resource XML file, we simply use "Phonetic" plus the target language's name, e.g. "Phonetic Klingon"
               // When would we want to specify a display name and not use the default? Well, for example, in Mandarin Chinese we call phonetic target language text "Pinyin".
               textDisplayModeDisplayName_TargetLanguagePhonetic = "Phonetic " + model.getCurrentTargetLanguageDisplayName_InCurrentNativeLanguage();
            }
            _index_dialogOptionIndexes_to_textDisplayMode[currentIndex] = _TEXT_DISPLAY_MODE__TARGET_TEXT_PHONETIC;
            dialogOptionList.push(textDisplayModeDisplayName_TargetLanguagePhonetic)
            currentIndex++;
         }
         var textDisplayModeDisplayName_TargetLanguage:String = model.getTargetLanguageResource(["languageSpecificDisplayStrings", model.getNativeLanguageIso639_3Code(), "displayModeName_targetLanguage"]);
         if (!textDisplayModeDisplayName_TargetLanguage) {
            // If we haven't specified a display name in the language resource XML file for the target language, we simply use the target language's name.
            // When would want to specify a display name and not use the default? Well, for example, in Mandarin Chinese we call target language text "Hanzi".
            textDisplayModeDisplayName_TargetLanguage = model.getCurrentTargetLanguageDisplayName_InCurrentNativeLanguage();
         }
         _index_dialogOptionIndexes_to_textDisplayMode[currentIndex] = _TEXT_DISPLAY_MODE__TARGET_TEXT;
         dialogOptionList.push(textDisplayModeDisplayName_TargetLanguage);
         currentIndex++;
         if (isNativeTextAvailable) {
            var textDisplayModeDisplayName_NativeLanguage:String = model.getCurrentNativeLanguageDisplayName_InCurrentNativeLanguage();
            _index_dialogOptionIndexes_to_textDisplayMode[currentIndex] = _TEXT_DISPLAY_MODE__NATIVE_TEXT;
            dialogOptionList.push(textDisplayModeDisplayName_NativeLanguage);
         }
         Utils_ANEs.showAlert_MultipleOptions("Select a Text Display Mode", dialogOptionList, onTextDisplayModeDialogCallback);
      }

      private function onCurrentChunkVOChange(newValue:int):void {
         if (currentLessons.isCurrentLessonAlphaReviewVersion()) {
            _button_PlayPause.enabled = false;
            _button_PlayPause.label = _BUTTON_LABEL__PLAY;
         } else {
            if (!_button_PlayPause.enabled) {
               // We're switching from alpha to non-alpha lesson
               _button_PlayPause.enabled = true;
            }
         }
         _button_Loop.enabled = !currentLessons.isCurrentLessonAlphaReviewVersion();
         _button_Record.enabled = !currentLessons.isCurrentLessonAlphaReviewVersion();
         _button_Translate.enabled = !currentLessons.isCurrentLessonAlphaReviewVersion();
         updateTextBoxesText();
      }

      private function onCurrentLessonsLengthChange(newValue:uint):void {
         _currentLessonsLengthDirty = true;
         invalidateDisplayList();
      }

      private function onDo_Credits():void {
         var vo:LessonVersionVO = currentLessons.currentLessonVO;
         if (!vo)
            return;
         currentLessons.pauseCurrentLessonVersionIfPlaying();
         navigator.pushView(View_Credits_Lesson, vo, navigator.context);
      }

      private function onDo_IKnowThis():void {
         if (currentlyInIKnowThisWaitInterval())
            return;
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         var isAbortNeeded:Boolean = false;
         if ((audioController.mostRecentAutoChunkFinishInitiatedIterateChunk > 0) &&
               ((Utils_DateTime.getCurrentMS_BasedOnDate() - audioController.mostRecentAutoChunkFinishInitiatedIterateChunk) < _CHUNK_START_I_KNOW_THIS_ABORT_TIME)) {
            // A new chunk just started, so the user probably meant to "I Know This" the previous chunk.
            // We're not sure, so we'll simply abort. But first we need one last check - we only do this if the chunk
            // changed because of an auto-advance while the lesson was playing - we don't do it if the
            // chunk changed because the user clicked < or >, or because they just suppressed
            // the previous chunk - in these cases they probably know what chunk they are in.
            isAbortNeeded = !((_mostRecentUserInitiatedChunkNavigationTime > 0) &&
                  (_mostRecentUserInitiatedChunkNavigationTime >= audioController.mostRecentAutoChunkFinishInitiatedIterateChunk))
         }
         if (isAbortNeeded) {
            Utils_Audio_Files.playFailureSound();
         }
         else {
            microphoneImage.alpha = 0;
            textField_ChunkText.text = "";
            AudioPlayer.getInstance().stop();
            Utils_Audio_Files.playClick();
            _mostRecentUserInitiatedChunkNavigationTime = Utils_DateTime.getCurrentMS_BasedOnDate();
            _mostRecentUserInitiatedIKnowThisTime = Utils_DateTime.getCurrentMS_BasedOnDate();
            //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
            callLater(onDo_IKnowThis_DispatchCommand);
         }
      }

      private function onDo_IKnowThis_DispatchCommand():void {
         var cb:Callbacks = new Callbacks(onDoIKnowThisComplete, null);
         var c:Command_DoIKnowThis = new Command_DoIKnowThis(currentLessons.length, cb);
         c.execute();
      }

      private function onDo_Loop():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         microphoneImage.alpha = 0;
         if (_button_Loop.selected) {
            audioController.onStartLoopMode();
         }
         else {
            audioController.onStopLoopMode();
         }
      }

      private function onDo_NextChunk():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         if (!currentLessons.isAnySelectedLessonVersionsHaveUnsuppressedChunks()) {
            Log.error("View_PlayLessons.onDo_NextChunk(): isAnySelectedLessonVersionsHaveUnsuppressedChunks returns false");
            return;
         }

         //// This code and other alpha-mode code may not work due to changes made when implementing the Explanatory chunk type
         // This is distinctly kludgy. If we're reviewing an alpha review version lesson, and the app isn't 'playing', i.e. auto-advance isn't on,
         // we want the first tap of the > button to NOT advance to the next chunk. Instead, we want to switch from native language text
         // to target language text. All this falls completely outside a primary design paradigm of Language Mentor, which is that AudioController
         // and its associated classes are responsible for advancing from leaf to leaf in a chunk, and that no other code can do this. So, we're faking
         // it here. We're not 'changing the leaf', we are ignoring leafs, and simply changing the text that we display to the user.
         /*if ((currentLessons.isCurrentLessonAlphaReviewVersion()) &&
               (!_isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge)) {
            // Kludge
            _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = true;
            textField_ChunkText.text = currentLessons.getCurrentChunkDefaultDisplayText();
            _button_PreviousChunk.enabled = true;
         }*/
         //// alpha mode else {
         // Standard non-kludgy logic
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         AudioPlayer.getInstance().stop();
         microphoneImage.alpha = 0;
         _mostRecentUserInitiatedChunkNavigationTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         callLater(onDo_NextChunk_Continued);
         //// alpha mode }
      }

      private function onDo_NextChunk_Continued():void {
         currentLessons.iterateChunk(1, true);
      }

      private function onDo_NextLesson():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         if (!currentLessons.isAnySelectedLessonVersionsHaveUnsuppressedChunks()) {
            Log.error("View_PlayLessons.onDo_NextLesson(): isAnySelectedLessonVersionsHaveUnsuppressedChunks returns false");
            return;
         }
         Log.debug("View_PlayLessons.onDo_NextLesson(): calling AudioPlayer.getInstance().stop()");
         AudioPlayer.getInstance().stop();
         microphoneImage.alpha = 0;
         callLater(onDo_NextLesson_Continued);
      }

      private function onDo_NextLesson_Continued():void {
         currentLessons.iterateLessonVersion(1, true);
      }

      private function onDo_PlayPause():void {
         // This is written to be used by both Pause button and gesture, but
         // no gesture is yet implemented. 20110720
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         currentLessons.togglePlayPause();
         if (currentLessons.isLessonPaused) {
            _button_PlayPause.label = _BUTTON_LABEL__PLAY;
            AudioPlayer.getInstance().stop();
            showHideMicrophoneImage();
            model.mostRecentDownloadProcessStartAllowedEventTime = new Date();
         } else {
            _button_PlayPause.label = _BUTTON_LABEL__PAUSE;
         }
      }

      private function onDo_PreviousChunk():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         if (!currentLessons.isAnySelectedLessonVersionsHaveUnsuppressedChunks()) {
            Log.error("View_PlayLessons.onDo_PreviousChunk(): isAnySelectedLessonVersionsHaveUnsuppressedChunks returns false");
            return;
         }
         //// alpha mode var isPreviousUserActionKludge:Boolean = _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge;
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         //// alpha mode if (isPreviousUserActionKludge) {
         //// alpha mode    textField_ChunkText.text = currentLessons.getCurrentDisplayText();
         //// alpha mode } else {
         AudioPlayer.getInstance().stop();
         microphoneImage.alpha = 0;
         _mostRecentUserInitiatedChunkNavigationTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         callLater(onDo_PreviousChunk_Continued);
         //// alpha mode }
      }

      private function onDo_PreviousChunk_Continued():void {
         currentLessons.iterateChunk(-1, true);
      }

      private function onDo_PreviousLesson():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         //// alpha mode _isMostRecentUserActionAnAlphaReviewDisplayDefaultTextKludge = false;
         if (!currentLessons.isAnySelectedLessonVersionsHaveUnsuppressedChunks()) {
            Log.error("View_PlayLessons.onDo_PreviousLesson(): isAnySelectedLessonVersionsHaveUnsuppressedChunks returns false");
            return;
         }
         Log.debug("View_PlayLessons.onDo_PreviousLesson(): calling AudioPlayer.getInstance().stop()");
         AudioPlayer.getInstance().stop();
         microphoneImage.alpha = 0;
         callLater(onDo_PreviousLesson_Continued);
      }

      private function onDo_PreviousLesson_Continued():void {
         currentLessons.iterateLessonVersion(-1, true);
      }

      private function onDo_Record():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         if (!_button_Record.enabled)
            return;
         if (_button_Record.selected) {
            audioController.onStartRecordMode();
         }
         else {
            audioController.onStopRecordMode();
         }
         showHideMicrophoneImage();
      }

      private function onDo_Translate():void {
         if (currentlyInUserActionRequiredWaitInterval())
            return;
         _mostRecentUserActionTime = Utils_DateTime.getCurrentMS_BasedOnDate();
         if (!_button_Translate.enabled)
            return;
         audioController.onTranslate();
      }

      private function onDoIKnowThisComplete(preCommandSelectedLessonCount:uint):void {
         // Show popup if lesson has been deselected
         if (currentLessons.length == preCommandSelectedLessonCount - 1) {
            Utils_ANEs.showAlert_Toast("Lesson Finished");
         }
      }

      private function onInitialize():void {
         Log.debug("View_PlayLessons.onInitialize()");
         if (!currentLessons.currentLessonVO) {
            Log.error("View_PlayLessons.onInitialize(): currentLessons.currentLesson is null");
            navigator.pushView(View_Home, null, null, transition_SlideView_Up);
         }
         if (!currentLessons.isAnySelectedLessonVersionsHaveUnsuppressedChunks()) {
            Log.error("View_PlayLessons.onInitialize(): no selected lessons are playable");
            navigator.pushView(View_Home, null, null, transition_SlideView_Up);
         }
         _watcher_CurrentChunkIndex = BindingUtils.bindSetter(onCurrentChunkVOChange, currentLessons, "currentChunkVO");
         _watcher_CurrentChunkIndex = BindingUtils.bindSetter(onLeafStart, audioController, "mostRecentLeafElementStartTime");
         _watcher_IsCurrentlyRecording = BindingUtils.bindSetter(onRecordingChange, AudioRecorder.getInstance(), "isCurrentlyRecording");
         _watcher_IsRecordMode = BindingUtils.bindSetter(onRecordingChange, audioController, "isRecordMode");
         _watcher_SelectedLessonVersionsDataLength = BindingUtils.bindSetter(onCurrentLessonsLengthChange, currentLessons, "length");
         Log.debug("View_PlayLessons.onInitialize(): finished");
      }

      private function onLeafStart(newValue:Date):void {
         updateTextBoxesText();
      }

      private function onNoRemainingLessonsAlertCallback():void {
         navigator.pushView(View_Home, null, null, transition_SlideView_Up);
      }

      private function onPreinitialize():void {
         Log.debug("View_PlayLessons.onPreinitialize()");
         _button_Credits = new Button_Standard();
         _button_IKnowThis = new Button_Standard();
         _button_IKnowThis.clickSoundEnabled = false; // Because we handle that here, i.e. either click or thud, in onDo_IKnowThis()
         _button_Loop = new Button_Toggle_Standard();
         _button_NextChunk = new Button_Standard();
         _button_NextLesson = new Button_Standard();
         _button_PlayPause = new Button_Standard();
         _button_PreviousChunk = new Button_Standard();
         _button_PreviousLesson = new Button_Standard();
         _button_Record = new Button_Toggle_Standard();
         _button_Translate = new Button_Standard();
         _button_Credits.label = _BUTTON_LABEL__CREDITS;
         _button_IKnowThis.label = _BUTTON_LABEL__I_KNOW_THIS;
         _button_Loop.label = _BUTTON_LABEL__LOOP;
         _button_NextChunk.label = _BUTTON_LABEL__NEXT_CHUNK;
         _button_NextLesson.label = _BUTTON_LABEL__NEXT_LESSON;
         _button_PlayPause.label = _BUTTON_LABEL__PLAY;
         _button_PreviousChunk.label = _BUTTON_LABEL__PREVIOUS_CHUNK;
         _button_PreviousLesson.label = _BUTTON_LABEL__PREVIOUS_LESSON;
         _button_Record.label = _BUTTON_LABEL__RECORD;
         _button_Translate.label = _BUTTON_LABEL__TRANSLATE;
         _button_Credits.addEventListener(MouseEvent.CLICK, onButtonClick_Credits);
         _button_IKnowThis.addEventListener(MouseEvent.CLICK, onButtonClick_IKnowThis);
         _button_Loop.addEventListener(MouseEvent.CLICK, onButtonClick_Loop);
         _button_NextChunk.addEventListener(MouseEvent.CLICK, onButtonClick_NextChunk);
         _button_NextLesson.addEventListener(MouseEvent.CLICK, onButtonClick_NextLesson);
         _button_PlayPause.addEventListener(MouseEvent.CLICK, onButtonClick_PlayPause);
         _button_PreviousChunk.addEventListener(MouseEvent.CLICK, onButtonClick_PreviousChunk);
         _button_PreviousLesson.addEventListener(MouseEvent.CLICK, onButtonClick_PreviousLesson);
         _button_Record.addEventListener(MouseEvent.CLICK, onButtonClick_Record);
         _button_Translate.addEventListener(MouseEvent.CLICK, onButtonClick_Translate);
         Log.debug("View_PlayLessons.onPreinitialize(): starting buttonList loop");
         for each (var b:UIComponent in buttonList) {
            if (!b)
               continue;
            b.percentHeight = 100;
            b.percentWidth = 100;
            b.styleName = ".playLessonsScreenButton";
         }
         var standardFontSize:Number = Utils_Text.getStandardFontSize();
         for each (b in buttonList_ArrowButtons) {
            if (!b)
               continue;
            b.setStyle("fontSize", standardFontSize * 2);
         }
         // For some mysterious reason I can't use a list and loop through the next 5 buttons, at least not in debug mode on Android
         // App was crashing when executing the first ("for each ...") line on the 3rd button.
         _button_Credits.setStyle("fontSize", standardFontSize);
         _button_IKnowThis.setStyle("fontSize", standardFontSize);
         _button_Loop.setStyle("fontSize", standardFontSize);
         _button_Record.setStyle("fontSize", standardFontSize);
         _button_Translate.setStyle("fontSize", standardFontSize);
         _button_PlayPause.percentHeight = 100;
         _button_PlayPause.percentWidth = 100;
         _button_PlayPause.setStyle("fontSize", Math.round(standardFontSize * 1.5));
         _button_PlayPause.styleName = ".playLessonsScreenButton";
         _button_Loop.selected = audioController.isLoopingChunk;
         isCustomGesturesEnabled = true;
         Utils_AIR.keepSystemAwake();
         var learningModeId:int = model.currentLearningModeId;
         var learningModeLabel:String = model.getLearningModeTokenFromID(learningModeId);
         switch (learningModeLabel) {
            case Constant_LearningModeLabels.LISTEN_TO_TARGET: {
               setButtonEnabled_Record(false);
               setButtonEnabled_Translate(true);
               break;
            }
            case Constant_LearningModeLabels.NATIVE_TO_TARGET_LEARNING:
            case Constant_LearningModeLabels.NATIVE_TO_TARGET_TRANSLATION:
            case Constant_LearningModeLabels.REPEAT_TARGET: {
               setButtonEnabled_Translate(false);
               setButtonEnabled_Record(true);
               _button_Record.enabled = AudioRecorder.getInstance().isMicrophoneAvailable();
               _button_Record.selected = audioController.isRecordMode;
               break;
            }
            case Constant_LearningModeLabels.TARGET_TO_NATIVE_TRANSLATION: {
               setButtonEnabled_Record(false);
               setButtonEnabled_Translate(false);
               break;
            }
            default: {
               throw new Error("Screen_PlayLessons.onPreinitialize(): no match for case of '" + learningModeLabel + "'.");
            }
         }
         Log.debug("View_PlayLessons.onPreinitialize(): finished");
      }

      private function onRecordingChange(newValue:Boolean):void {
         if (Utils_System.isIOS()) {
            _timer_ShowHideMicrophoneImage = new Timer(250, 1);
            _timer_ShowHideMicrophoneImage.addEventListener(TimerEvent.TIMER, showHideMicrophoneImage);
            _timer_ShowHideMicrophoneImage.start();
         }
         else {
            showHideMicrophoneImage();
         }
      }

      private function onTextDisplayModeDialogCallback(optionIndex:int = -1):void {
         if (optionIndex == -1) {
            // User has cancelled
            return;
         }
         _currentTextDisplayMode = _index_dialogOptionIndexes_to_textDisplayMode[optionIndex];
         _index_dialogOptionIndexes_to_textDisplayMode = null;
         updateChunkTextTextBoxText();
      }




      private function onViewActivate():void {
         Log.debug("View_PlayLessons.onViewActivate()");
         if ((!currentLessons.isLessonPlaying) || currentLessons.isLessonPaused) {
            _button_PlayPause.label = _BUTTON_LABEL__PLAY;
         }
         else {
            _button_PlayPause.label = _BUTTON_LABEL__PAUSE;
         }
         showHideMicrophoneImage();
         updateTextBoxesText();
         Log.debug("View_PlayLessons.onViewActivate(): finished");
      }

      private function onViewDeactivate():void {
         if (Constant_AudioModeConfig.AUDIO_MODE__CURRENT == Constant_AudioModeConfig.AUDIO_MODE__STANDARD) {
            currentLessons.pauseCurrentLessonVersionIfPlaying();
         }
      }

      private function processCurrentLessonsLengthChange():void {
         if (currentLessons.length == 0) {
            Utils_ANEs.showAlert_OkayButton(_ALERT_MESSAGE__ALL_LESSONS_LEARNED, onNoRemainingLessonsAlertCallback);
            return;
         }
      }

      private function setButtonEnabled_Record(value:Boolean):void {
         if (_button_Record) {
            _button_Record.enabled = value;
            //_button_Record.includeInLayout = value;
            //_button_Record.visible = value;
         }
      }

      private function setButtonEnabled_Translate(value:Boolean):void {
         if (_button_Translate) {
            _button_Translate.enabled = value;
            _button_Translate.includeInLayout = value;
            _button_Translate.visible = value;
         }
      }

      private function setChangeLessonEnabled(value:Boolean):void {
         if (_button_PreviousLesson) {
            _button_PreviousLesson.enabled = value;
         }
         if (_button_NextLesson) {
            _button_NextLesson.enabled = value;
         }
      }

      private function showHideMicrophoneImage(event:TimerEvent = null):void {
         if (_timer_ShowHideMicrophoneImage) {
            _timer_ShowHideMicrophoneImage.stop();
            _timer_ShowHideMicrophoneImage.removeEventListener(TimerEvent.TIMER, showHideMicrophoneImage);
            _timer_ShowHideMicrophoneImage = null;
         }
         if ((!(audioController)) ||
               (!(currentLessons)) ||
               (!audioController.isRecordMode)) {
            microphoneImage.alpha = 0;
         }
         else {
            if (AudioRecorder.getInstance().isCurrentlyRecording) {
               microphoneImage.alpha = .5;
            } else {
               microphoneImage.alpha = 0;
            }
         }
      }

      private function updateChunkTextTextBoxText():void {
         //// Implement alpha-mode before using alpha mode
         if ((textField_ChunkText.height == 0) || (textField_ChunkText.width == 0))
            return;
         var fontSize:uint = Utils_Text.getStandardFontSize();
         var displayText:String = "";
         if (currentLessons.currentChunkVO) {
            switch (currentLessons.currentChunkVO.chunkType) {
               case ChunkVO.CHUNK_TYPE__DEFAULT: {
                  switch (_currentTextDisplayMode) {
                     case _TEXT_DISPLAY_MODE__NATIVE_TEXT:
                        displayText = currentLessons.currentChunkVO.textNativeLanguage;
                        break;
                     case _TEXT_DISPLAY_MODE__NONE:
                        fontSize = Math.round(Utils_Text.getStandardFontSize() * 1.5);
                        displayText = "Tap Here To\nSwitch Between Text\nDisplay Modes";
                        break;
                     case _TEXT_DISPLAY_MODE__TARGET_TEXT:
                        displayText = currentLessons.currentChunkVO.textTargetLanguage;
                        break;
                     case _TEXT_DISPLAY_MODE__TARGET_TEXT_PHONETIC:
                        displayText = currentLessons.currentChunkVO.textTargetLanguagePhonetic;
                        break;
                     default:
                        Log.error("View_PlayLessons.updateChunkTextTextBoxText() - no case for: " + _currentTextDisplayMode);
                  }
                  break;
               }
               case ChunkVO.CHUNK_TYPE__EXPLANATORY: {
                  if (_currentTextDisplayMode != _TEXT_DISPLAY_MODE__NONE) {
                     displayText = currentLessons.currentChunkVO.textDisplay;
                  }
                  break;
               }
               default:
                  Log.error("View_PlayLessons.updateChunkTextTextBoxText(): No match for chunkType: " + currentLessons.currentChunkVO.chunkType);
            }
         }
         if (!displayText)
               displayText = "";
         if (_currentTextDisplayMode == _TEXT_DISPLAY_MODE__NONE) {
            textField_ChunkText.text = displayText
         }
         else {
            textField_ChunkText.text = displayText;
            var charCountBelowWhichWeIncreaseFontSize:uint = 70;
            var textFieldHorizontalInches:Number = textField_ChunkText.width / Capabilities.screenDPI;
            var textFieldVerticalInches:Number = textField_ChunkText.height / Capabilities.screenDPI;
            var textFieldSquareInches:Number = textFieldHorizontalInches * textFieldVerticalInches;
            var textFieldSquareInchesSquareRoot:Number = Math.sqrt(textFieldSquareInches);
            fontSize = (textFieldSquareInchesSquareRoot * Capabilities.screenDPI) / 10;
            if (displayText.length < charCountBelowWhichWeIncreaseFontSize) {
               var lengthProportion:Number = charCountBelowWhichWeIncreaseFontSize / displayText.length;
               var shortTextAdjustmentFactor:Number = (((lengthProportion - 1) * .17) + 1);
               shortTextAdjustmentFactor = Math.min(shortTextAdjustmentFactor, 1.5);
               //trace("##### " + shortTextAdjustmentFactor);
               fontSize = Math.round(fontSize * shortTextAdjustmentFactor);
            }
         }
         textField_ChunkText.fontSize = fontSize;
         var leading:Number = Math.round(Utils_Text.getStandardFontSize() * .43);
         textField_ChunkText.setStyle("leading", leading);
      }

      private function updateLessonTitleTextBoxText():void {
         var titleText:String =
               model.getLessonVersionNativeLanguageNameFromLessonVersionVO(currentLessons.currentLessonVO);
         textField_LessonTitle.text = titleText;
         var fontSize:uint = Math.round(Utils_Text.getStandardFontSize() * 1.4);
         if (titleText.length > 25) {
            var adjustmentFactor:Number = 25 / titleText.length;
            fontSize = Math.round(fontSize * adjustmentFactor);
         }
         textField_LessonTitle.fontSize = fontSize;
      }

      private function updateTextBoxesText():void {
         if ((!currentLessons.currentLessonVO) ||
               (currentLessons.currentChunkIndex == -1) ||
               (!currentLessons.currentLessonUnsuppressedChunks) ||
               (currentLessons.currentLessonUnsuppressedChunks.length == 0)) {
            textField_ChunkStatus.text = "";
            textField_ChunkText.text = "";
            textField_LessonTitle.text = "";
            return;
         }
         updateLessonTitleTextBoxText();
         updateChunkTextTextBoxText();
         var totalChunks:uint = currentLessons.currentLessonChunks_SortedByLocationInOrder.length;
         var learnedChunks:int = totalChunks - currentLessons.currentLessonUnsuppressedChunks.length;
         var chunkStatusText:String = "";
         chunkStatusText += (currentLessons.currentChunkIndex + 1);
         chunkStatusText += " / ";
         chunkStatusText += totalChunks + "\n";
         chunkStatusText += currentLessons.getIndexOfCurrentChunkWithinUnsuppressedChunks() + 1;
         chunkStatusText += " / ";
         chunkStatusText += currentLessons.currentLessonUnsuppressedChunks.length;
         textField_ChunkStatus.text = chunkStatusText;
      }
      ]]>
    </fx:Script>

   <s:VGroup id = "mainGroup"
             width = "97%"
             height = "97%"
             horizontalCenter = "0"
             verticalCenter = "0">
      <s:HGroup height = "14%"
                width = "100%">
         <s:Group id = "group_IKnowThisButton"
                  height = "100%"
                  width = "28%">
         </s:Group>
         <s:Group id = "group_LoopButton"
                  height = "100%"
                  width = "20%">
         </s:Group>
         <s:Group id = "group_CreditsButton"
                  height = "100%"
                  width = "24%">
         </s:Group>
         <s:Group id = "group_RecordAndTranslateButtons"
                  height = "100%"
                  width = "28%">
         </s:Group>
      </s:HGroup>
      <s:VGroup id = "group_MainTextDisplay"
                height = "58%"
                width = "100%">
         <text:CenteredMobileText id = "textField_LessonTitle"
                                  height = "20%"
                                  width = "100%"/>
         <s:Line xFrom = "0"
                 xTo = "{group_MainTextDisplay.width - 5}">
            <s:stroke>
               <s:SolidColorStroke color = "0x999999"
                                   weight = "1"
                                   caps = "square"/>
            </s:stroke>
         </s:Line>
         <s:Spacer/>
         <s:Group height = "80%"
                  width = "100%">
            <s:VGroup height = "100%"
                      width = "20%"
                      verticalAlign = "top"
                      horizontalCenter = "0">
               <s:Image id = "microphoneImage"
                        alpha = "0"
                        horizontalCenter = "0">
                  <s:source>
                     <s:MultiDPIBitmapSource source160dpi = "{Resources_Image.IMAGE__MICROPHONE_160}"
                                             source240dpi = "{Resources_Image.IMAGE__MICROPHONE_240}"
                                             source320dpi = "{Resources_Image.IMAGE__MICROPHONE_320}"
                                             source480dpi = "{Resources_Image.IMAGE__MICROPHONE_480}"/>
                  </s:source>
               </s:Image>
            </s:VGroup>
            <text:CenteredMobileText id = "textField_ChunkText"
                                     height = "100%"
                                     width = "100%"
                                     fontWeight = "bold"
                                     mouseDown = "onChunkTextTextFieldClick()"/>

         </s:Group>
         <s:Line xFrom = "0"
                 xTo = "{group_MainTextDisplay.width - 5}">
            <s:stroke>
               <s:SolidColorStroke color = "0x999999"
                                   weight = "1"
                                   caps = "square"/>
            </s:stroke>
         </s:Line>
      </s:VGroup>
      <s:HGroup height = "14%"
                width = "100%">
         <s:Group id = "group_PreviousLessonButton"
                  height = "100%"
                  width = "29%">
         </s:Group>
         <text:CenteredMobileText id = "textField_ChunkStatus"
                                  fontSize = "{Math.round(Utils_Text.getStandardFontSize() * 1.8)}"
                                  fontWeight = "bold"
                                  height = "100%"
                                  width = "42%"/>
         <s:Group id = "group_NextLessonButton"
                  height = "100%"
                  width = "29%">
         </s:Group>
      </s:HGroup>
      <s:HGroup height = "14%"
                width = "100%">
         <s:Group id = "group_PreviousChunkButton"
                  height = "100%"
                  width = "29%">
         </s:Group>
         <s:Group id = "group_PlayPauseButton"
                  height = "100%"
                  width = "42%">
         </s:Group>
         <s:Group id = "group_NextChunkButton"
                  height = "100%"
                  width = "29%">
         </s:Group>
      </s:HGroup>
   </s:VGroup>
</view:View_Base>
