<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2020 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                xmlns:s = "library://ns.adobe.com/flex/spark"
                xmlns:button = "com.brightworks.component.button.*"
                xmlns:checkbox = "com.brightworks.component.checkbox.*"
                xmlns:container = "com.brightworks.container.*"
                xmlns:view = "com.langcollab.languagementor.view.*"
                enterFrame = "onEnterFrame()"
                initialize = "onInitialize()"
                title = "{_TITLE}"
                viewActivate = "onViewActivate()">

   <fx:Declarations>
   </fx:Declarations>

   <fx:Script>
        <![CDATA[
      import com.brightworks.util.Utils_Text;
      import com.brightworks.util.audio.Utils_Audio_Files;
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_AIR;
      import com.brightworks.util.Utils_Layout;
      import com.brightworks.util.Utils_String;
      import com.langcollab.languagementor.component.button.Button_ActionBar_LeftArrow;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;

      private static const _TITLE:String = "Diagnostics";

      private var _dataString_Dynamic:String = "";
      private var _dataString_Previous:String;
      private var _dataString_Summary:String;
      private var _frameTickCount:uint = 0;
      private var _isDisposed:Boolean;
      private var _isFrozen:Boolean;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
         Log.disableInAppTracing();
         Utils_AIR.keepSystemAwake(false);
      }

      override public function doGoBack():void {
         Log.info("View_Diagnostics.doGoBack()");
         if (navigatorComp.selectedItem == settingsView)
            navigatorComp.selectedItemById = "dataView";
         else
            super.doGoBack();
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override protected function onAddedToStage(event:Event = null):void {
         removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);
         stage.autoOrients = true;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function displayData():void {
         if (_isFrozen)
            return;
         dataTextArea.text = getDisplayData();
         if ((dataTextAreaScroller) &&
               (dataTextAreaScroller.verticalScrollBar))
            dataTextAreaScroller.verticalScrollBar.value = 0;
      }

      private function getDisplayData():String {
         var s:String = _dataString_Summary;
         if (_dataString_Dynamic.length > 0) {
            s += "\n   ### Dynamic Log Data (display impacts performance) ### \n\n";
            s += _dataString_Dynamic;
            s += "\n\n   ############### Stored Log Data ############### \n";
         }
         s += "\n" + _dataString_Previous;
         return s;
      }

      private function initData():void {
         _dataString_Summary = Log.createLogInfoSummaryString();
         _dataString_Previous = Log.getLogInfoForInAppViewing();
         switch (contextType) {
            case ViewContext.CONTEXT_TYPE__DIAGNOSTICS_DISPLAY:
               break;
            case ViewContext.CONTEXT_TYPE__SEND_FEEDBACK:
               Log.enableInAppTracing(onNewLogData);
               break;
            default:
               Log.error("View_Diagnostics.initData(): No case for " + contextType);
         }
         displayData();
      }

      private function onActionBarBackButtonClick(event:MouseEvent):void {
         Log.info("View_Diagnostics.onActionBarBackButtonClick()");
         Utils_Audio_Files.playClick();
         doGoBack();
      }

      private function onCopyButtonClick():void {
         Log.info("View_Diagnostics.onCopyButtonClick()");
         Log.copyRecentInfoToClipboard();
      }

      private function onEnterFrame():void {
         _frameTickCount =
               (_frameTickCount >= 10) ?
                     1 :
                     _frameTickCount + 1;
         title = _TITLE + Utils_String.padEnd("", _frameTickCount, ".");
      }

      private function onFreezeButtonClick():void {
         Log.info("View_Diagnostics.onFreezeButtonClick()");
         _isFrozen = !_isFrozen;
         freezeButton.label =
               _isFrozen ?
                     "Unfreeze" :
                     "Freeze";
         displayData();
      }

      private function onIncludeDebugDataCheckboxChange():void {
         var newLogLevel:int =
               includeDebugDataCheckbox.selected ?
                     Log.LOG_LEVEL__DEBUG :
                     Log.LOG_LEVEL__INFO;
         Log.inAppLogLevelOverrideLevel = newLogLevel;
         initData();
      }

      private function onInitialize():void {
         navigationContent = [];
         var leftArrowButton:Button_ActionBar_LeftArrow;
         leftArrowButton = new Button_ActionBar_LeftArrow();
         leftArrowButton.percentHeight = 100;
         leftArrowButton.addEventListener(MouseEvent.CLICK, onActionBarBackButtonClick);
         navigationContent.push(leftArrowButton);
      }

      private function onNewLogData(newData:String):void {
         _dataString_Dynamic = newData + "\n" + _dataString_Dynamic;
         displayData();
      }

      private function onSettingsButtonClick():void {
         Log.info("View_Diagnostics.onSettingsButtonClick()");
         navigatorComp.selectedItemById = "settingsView";
      }

      private function onSettingsViewOkayButtonClick():void {
         Log.info("View_Diagnostics.onSettingsViewOkayButtonClick()");
         navigatorComp.selectedItemById = "dataView";
      }

      private function onViewActivate():void {
         if (Log.inAppLogLevelOverrideLevel < Log.LOG_LEVEL__INFO)
            Log.inAppLogLevelOverrideLevel = Log.LOG_LEVEL__INFO;
         initData();
         Utils_AIR.keepSystemAwake();
      }
      ]]>
    </fx:Script>

   <container:Navigator id = "navigatorComp"
                        height = "100%"
                        width = "100%">
      <s:VGroup id = "dataView"
                width = "100%"
                height = "100%">
         <s:Spacer/>
         <s:Spacer/>
         <s:HGroup id = "dateViewButtonGroup"
                   width = "100%"
                   horizontalAlign = "center">
            <button:NormalButton id = "freezeButton"
                                 label = "Freeze"
                                 width = "35%"
                                 click = "onFreezeButtonClick()"/>
            <button:NormalButton id = "copyButton"
                                 label = "Copy"
                                 width = "25%"
                                 click = "onCopyButtonClick()"/>
            <button:NormalButton id = "settingsButton"
                                 label = "Settings"
                                 width = "35%"
                                 click = "onSettingsButtonClick()"/>
         </s:HGroup>
         <s:Spacer/>
         <s:Scroller id = "dataTextAreaScroller"
                     height = "{navigatorComp.height - dateViewButtonGroup.height}"
                     width = "100%"
                     horizontalScrollPolicy = "off"
                     verticalScrollPolicy = "on">
            <s:Group>
               <s:TextArea id = "dataTextArea"
                           editable = "false"
                           selectable = "false"
                           fontSize = "{Utils_Text.getStandardFontSize()}"
                           borderVisible = "false"
                           skinClass = "spark.skins.mobile.TextAreaSkin"/>
            </s:Group>
         </s:Scroller>
      </s:VGroup>
      <s:VGroup id = "settingsView"
                width = "100%"
                height = "100%"
                paddingTop = "{Utils_Layout.getStandardPadding()}"
                paddingBottom = "{Utils_Layout.getStandardPadding()}"
                paddingLeft = "{Utils_Layout.getStandardPadding()}"
                paddingRight = "{Utils_Layout.getStandardPadding()}">
         <s:Spacer/>
         <checkbox:NormalCheckBox id = "includeDebugDataCheckbox"
                                  label = "Include Detailed Debug Data"
                                  change = "onIncludeDebugDataCheckboxChange()"/>
         <s:VGroup height = "100%"
                   width = "100%"
                   verticalAlign = "bottom">
            <s:HGroup width = "100%"
                      horizontalAlign = "center">
               <button:NormalButton id = "settingsViewOkayButton"
                                    label = "OK"
                                    click = "onSettingsViewOkayButtonClick()"
                                    width = "60%"/>
            </s:HGroup>
         </s:VGroup>
      </s:VGroup>
   </container:Navigator>
</view:View_Base>
