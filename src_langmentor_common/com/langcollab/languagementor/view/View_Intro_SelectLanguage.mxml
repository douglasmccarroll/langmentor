<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Intro_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                      xmlns:s = "library://ns.adobe.com/flex/spark"
                      xmlns:view = "com.langcollab.languagementor.view.*"
                      creationComplete = "onCreationComplete()"
                      preinitialize = "onPreinitialize()"
                      title = "Intro &amp; Setup: Select Language">

   <fx:Declarations>
   </fx:Declarations>

   <fx:Script>
      <![CDATA[
      import com.brightworks.component.checkbox.NormalCheckBox;
      import com.brightworks.component.list.NormalList;
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_Text;
      import com.langcollab.languagementor.component.itemrenderer.ItemRenderer_LanguageSelectionList;
      import com.langcollab.languagementor.component.uiwidget.IUIWidget_Text;
      import com.langcollab.languagementor.component.uiwidget.UIWidget_Viewlet__Heading;
      import com.langcollab.languagementor.vo.LanguageVO;

      import mx.binding.utils.ChangeWatcher;

      import mx.collections.ArrayCollection;
      import mx.collections.Sort;
      import mx.collections.SortField;
      import mx.controls.Spacer;

      import spark.components.BorderContainer;
      import spark.components.List;

      private var _displayOnlyLanguagesWithRecommendedLibrariesCheckbox:NormalCheckBox;
      private var _isCreationCompleteCalled:Boolean = false;
      private var _isDisposed:Boolean = false;
      private var _isPostInitStuffDone:Boolean;
      private var _languageList:List;
      private var _languageListDataProvider:ArrayCollection = new ArrayCollection();
      private var _watcher_IsModelDataInitialized:ChangeWatcher;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
         _languageList.removeEventListener(Event.CHANGE, onListChange);
         if (_watcher_IsModelDataInitialized) {
            _watcher_IsModelDataInitialized.unwatch();
            _watcher_IsModelDataInitialized = null;
         }
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override protected function onNextButtonClick(event:MouseEvent):void {
         Log.info("View_Intro_SelectLanguage.onContinueButtonClick()");
         if (!_languageList.selectedItem) {
            Log.warn("View_Intro_SelectLanguage.onContinueButtonClick(): no selectedItem");
            return;
         }
         model.initTargetLanguage(_languageList.selectedItem["value"], true);
         super.onNextButtonClick(event);
      }

      override protected function onViewActivate():void {
         super.onViewActivate();
         nextButton.enabled = false;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function doPostInitStuff():void {
         if ((!_isCreationCompleteCalled) || (!model.isDBDataInitialized)) {
            Log.debug("View_Intro_SelectLanguage.doPostInitStuff(): Not ready yet");
            return;
         }
         Log.debug("View_Intro_SelectLanguage.doPostInitStuff(): Doing init stuff");
         var textWidget:IUIWidget_Text;
         var borderContainer:BorderContainer;
         textWidget = new UIWidget_Viewlet__Heading();
         textWidget.text = "What language would you like to learn?";
         _displayOnlyLanguagesWithRecommendedLibrariesCheckbox = new NormalCheckBox();
         _displayOnlyLanguagesWithRecommendedLibrariesCheckbox.label = "Display Only Languages\nwith Recommended Libraries";
         _displayOnlyLanguagesWithRecommendedLibrariesCheckbox.selected = true;
         _displayOnlyLanguagesWithRecommendedLibrariesCheckbox.addEventListener(Event.CHANGE, onDisplayOnlyLanguagesWithRecommendedLibrariesCheckboxChange)
         viewletGroup.addElement(textWidget);
         var spacer:Spacer;
         spacer = new Spacer();
         spacer.height = Utils_Text.getStandardFontSize();
         viewletGroup.addElement(spacer);
         viewletGroup.addElement(_displayOnlyLanguagesWithRecommendedLibrariesCheckbox);
         spacer = new Spacer();
         spacer.height = Utils_Text.getStandardFontSize();
         viewletGroup.addElement(spacer);
         borderContainer = new BorderContainer();
         borderContainer.percentHeight = 100;
         borderContainer.percentWidth = 100;
         _languageList = new NormalList();
         _languageList.percentHeight = 100;
         _languageList.percentWidth = 100;
         _languageList.dataProvider = _languageListDataProvider;
         _languageList.addEventListener(Event.CHANGE, onListChange);
         _languageList.itemRenderer = new ClassFactory(ItemRenderer_LanguageSelectionList);
         borderContainer.addElement(_languageList);
         viewletGroup.addElement(borderContainer);
         if (_watcher_IsModelDataInitialized) {
            _watcher_IsModelDataInitialized.unwatch();
            _watcher_IsModelDataInitialized = null;
         }
         _isPostInitStuffDone = true;
         populateLanguageListDataProvider();
      }

      private function onCreationComplete():void {
         _isCreationCompleteCalled = true;
         doPostInitStuff();
      }

      private function onDisplayOnlyLanguagesWithRecommendedLibrariesCheckboxChange(e:Event):void {
         populateLanguageListDataProvider();
         nextButton.enabled = false;
      }

      private function onListChange(e:Event):void {
         nextButton.enabled = (_languageList.selectedItem);
      }

      private function onModelDataInitialized(event:Event):void {
         Log.debug("View_Intro_SelectLanguage.onModelDataInitialized()");
         if (_watcher_IsModelDataInitialized) {
            _watcher_IsModelDataInitialized.unwatch();
            _watcher_IsModelDataInitialized = null;
         }
         doPostInitStuff();
      }

      private function onPreinitialize():void {
         Log.debug("View_Intro_SelectLanguage.onPreinitialize()");
         _watcher_IsModelDataInitialized = ChangeWatcher.watch(model, "isDBDataInitialized", onModelDataInitialized);
      }

      private function populateLanguageListDataProvider():void {
         _languageListDataProvider.removeAll();
         var sort:Sort = new Sort();
         sort.fields = [new SortField("label")];
         _languageListDataProvider.sort = sort;
         _languageListDataProvider.refresh();
         var languageVOList:Array = model.getLanguageVOs();
         for each (var vo:LanguageVO in languageVOList) {
            if (_displayOnlyLanguagesWithRecommendedLibrariesCheckbox.selected) {
               if (!vo.hasRecommendedLibraries)
                  continue;
            }
            var displayName:String = model.getLanguageDisplayName_Alphabetizable_InCurrentNativeLanguage(vo.id);
            var item:Object = {label: displayName, value: vo.id};
            _languageListDataProvider.addItem(item);
         }
         if (_languageListDataProvider.length == 0) {
            callLater(populateLanguageListDataProvider);
         }

      }
      ]]>
   </fx:Script>

</view:View_Intro_Base>
