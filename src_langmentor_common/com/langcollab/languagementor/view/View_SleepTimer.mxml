<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:button="com.langcollab.languagementor.component.button.*"
                xmlns:view="com.langcollab.languagementor.view.*"
                title="Sleep Timer"
                viewActivate="onViewActivate()">

   <fx:Declarations>
   </fx:Declarations>

   <fx:Script>
        <![CDATA[
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_Layout;
      import com.brightworks.util.Utils_System;
      import com.brightworks.util.Utils_Text;
      import com.langcollab.languagementor.constant.Constant_MentorTypeSpecific;
      import com.langcollab.languagementor.constant.Constant_UserActionTypes;
      import com.langcollab.languagementor.controller.useractionreporting.UserAction;
      import com.langcollab.languagementor.controller.useractionreporting.UserActionReportingManager;

      private var _isDisposed:Boolean = false;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function getSleepTimerNumeralFontsize():int {
         var result:int = Math.round(Utils_Text.getStandardFontSize() * 1.7);
         if (Utils_System.isIPad) {
            result = Math.round(result * .55);
         }
         return result;
      }

      private function onStartTimerButtonClick():void {
         Log.info("View_DeleteAllData.onOkayButtonClick()");
         currentLessons.setSleepTimer(minutesSpinner.selectedItem);
         reportUserActivity();
         doGoHome();
      }

      private function onViewActivate():void {
         textDisplayLabel.text = "How many minutes would you like " + Constant_MentorTypeSpecific.APP_NAME__FULL + " to continue before going to sleep?";
      }

      private function reportUserActivity():void {
         var activity:UserAction = new UserAction();
         activity.actionType = Constant_UserActionTypes.SLEEP_TIMER__START;
         UserActionReportingManager.reportActivityIfUserHasActivatedReporting(activity);
      }
      ]]>
    </fx:Script>

   <s:VGroup height="100%"
             width="100%"
             horizontalAlign="center"
             bottom="10"
             top="10"
             left="10"
             right="10">
      <s:Spacer height="5%"/>
      <s:Label id="textDisplayLabel"
               fontSize="{Math.round(Utils_Text.getStandardFontSize() * 2)}"
               width="80%"/>
      <s:SpinnerListContainer
            horizontalCenter="0"
            top="20"
            bottom="20"
            height="50%"
            width="80%">
         <s:SpinnerList id="minutesSpinner"
                        width="100%"
                        fontSize="{getSleepTimerNumeralFontsize()}"
                        textAlign="center">
            <s:dataProvider>
               <s:NumericDataProvider
                     minimum="1"
                     maximum="60"/>
            </s:dataProvider>
         </s:SpinnerList>
      </s:SpinnerListContainer>
      <s:Spacer/>

   </s:VGroup>
   <s:BorderContainer id="buttonContainer"
                      width="100%"
                      backgroundColor="0x8888CC"
                      bottom="0">
      <s:layout>
         <s:HorizontalLayout horizontalAlign="center"
                             paddingTop="{Utils_Layout.getStandardPadding()}"
                             paddingBottom="{Utils_Layout.getStandardPadding() + 4}"/>
      </s:layout>
      <s:HGroup id="buttonGroup"
                width="100%"
                horizontalAlign="center">
         <button:Button_Standard id="startTimerButton"
                                 label="Start Timer"
                                 click="onStartTimerButtonClick()"
                                 visible="true"
                                 width="60%"/>
      </s:HGroup>
   </s:BorderContainer>
</view:View_Base>
