<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                xmlns:s = "library://ns.adobe.com/flex/spark"
                xmlns:view = "com.langcollab.languagementor.view.*"
                implements = "com.brightworks.interfaces.IDisposable"
                title = "Credits &amp; Copyright"
                viewActivate = "onViewActivate()">

   <fx:Script>
        <![CDATA[
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_HTML;
      import com.langcollab.languagementor.constant.Constant_UserActionTypes;
      import com.langcollab.languagementor.controller.useractionreporting.UserAction;
      import com.langcollab.languagementor.controller.useractionreporting.UserActionReportingManager;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;
      import com.langcollab.languagementor.vo.LessonVersionVO;

      import spark.components.supportClasses.StyleableTextField;

      private static const TEXT_FIELD_PADDING:uint = 20;

      private var _creditsXML:XML;
      private var _isDisposed:Boolean = false;
      private var _lessonDescription:String;
      private var _lessonName:String;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
         if (_creditsXML) {
            System.disposeXML(_creditsXML);
            _creditsXML = null;
         }
      }

      override public function doGoHome():void {
         switch (contextType) {
            case ViewContext.CONTEXT_TYPE__HOME_SCREEN_LINK_BUTTON:
               navigator.pushView(View_Home, null, null, transition_SlideView_Right);
               break;
            default:
               navigator.pushView(View_Home, null, null, transition_SlideView_Left);
         }
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function onCreditsTextAreaLink(event:TextEvent):void {
         var url:String = event.text;
         var urlRequest:URLRequest = new URLRequest(url);
         navigateToURL(urlRequest);
      }

      private function onViewActivate():void {
         var vo:LessonVersionVO = LessonVersionVO(data);
         var creditsXMLString:String = model.getLessonVersionNativeLanguageCreditsXMLFromLessonVersionVO(vo);
         _creditsXML = new XML(creditsXMLString);
         _lessonDescription = model.getLessonVersionNativeLanguageDescriptionFromLessonVersionVO(vo);
         _lessonName = model.getLessonVersionNativeLanguageNameFromLessonVersionVO(vo);
         populateCreditsTextArea();
         reportUserActivity(vo);
      }

      private function populateCreditsTextArea():void {
         var htmlString:String = "";
         htmlString += Utils_HTML.createHTML_CreditsTitle(_lessonName);
         htmlString += Utils_HTML.createHTML_Spacer();
         var partNodeList:XMLList = _creditsXML.part;
         for each (var partXML:XML in partNodeList) {
            var nodeType:String = partXML.partType[0].toString();
            switch (nodeType) {
               case "hyperlink": {
                  htmlString += Utils_HTML.createHTML_CreditsPart_Hyperlink(partXML);
                  break;
               }
               case "hyperlinkList": {
                  htmlString += Utils_HTML.createHTML_CreditsPart_HyperlinkList(partXML);
                  break;
               }
               case "textSection": {
                  htmlString += Utils_HTML.createHTML_CreditsPart_TextSection(partXML);
                  break;
               }
               default: {
                  Log.warn("View_Credits_Lesson.populateCreditsTextArea(): No case for 'nodeType' of '" + nodeType + "'");
               }

            }
         }
         StyleableTextField(creditsTextArea.textDisplay).htmlText = htmlString;
         StyleableTextField(creditsTextArea.textDisplay).styleSheet = Utils_HTML.getHTMLStyleSheet();
         StyleableTextField(creditsTextArea.textDisplay).addEventListener(TextEvent.LINK, onCreditsTextAreaLink);
      }

      private function reportUserActivity(vo:LessonVersionVO):void {
         var activity:UserAction = new UserAction();
         activity.actionType = Constant_UserActionTypes.CREDITS_LESSON;
         activity.lessonId = vo.publishedLessonVersionId;
         activity.lessonName_NativeLanguage = model.getLessonVersionNativeLanguageNameFromLessonVersionVO(vo);
         activity.lessonProviderId = vo.contentProviderId;
         activity.lessonVersion = vo.publishedLessonVersionVersion;
         UserActionReportingManager.reportActivityIfUserHasActivatedReporting(activity);
      }
      ]]>
    </fx:Script>

   <s:Scroller horizontalScrollPolicy = "off"
               height = "100%"
               width = "100%">
      <s:VGroup height = "100%"
                width = "100%">
         <!-- We use 'fontFamily = "_sans"' here in order to get Chinese characters to display on Android -->
         <s:TextArea id = "creditsTextArea"
                     width = "100%"
                     height = "2000"
                     fontFamily = "_sans"
                     editable = "false"
                     borderVisible = "false"
                     skinClass = "spark.skins.mobile.TextAreaSkin"
                     contentBackgroundColor = "white"
                     paddingBottom = "{TEXT_FIELD_PADDING}"
                     paddingLeft = "{TEXT_FIELD_PADDING}"
                     paddingRight = "{TEXT_FIELD_PADDING}"
                     paddingTop = "{TEXT_FIELD_PADDING}"/>
      </s:VGroup>
   </s:Scroller>
</view:View_Base>
