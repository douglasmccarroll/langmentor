<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                xmlns:s = "library://ns.adobe.com/flex/spark"
                xmlns:button="com.langcollab.languagementor.component.button.*"
                xmlns:view = "com.langcollab.languagementor.view.*"
                creationComplete = "onCreationComplete()"
                viewActivate = "onViewActivate()">

   <fx:Declarations>
      <s:Fade id = "fadeEffect"
              alphaFrom = "0"
              alphaTo = "1"
              duration = "600"/>
   </fx:Declarations>


   <fx:Script>
        <![CDATA[
      import com.brightworks.util.Log;
      import com.brightworks.util.Utils_Dispose;
      import com.brightworks.util.Utils_Layout;
      import com.brightworks.util.Utils_System;
      import com.langcollab.languagementor.view.supportClasses.ViewContext;

      import spark.components.Button;
      import spark.transitions.ViewTransitionBase;

      protected static const BUTTON_LABEL__OK:String = "OK";

      protected var viewletGroup_Scrollable:Boolean = true;
      protected var viewletGroup_UsePadding:Boolean = true;

      private var _addedBottomButtonList:Array = [];
      private var _index_AddedButtons_to_ClickHandlers:Dictionary = new Dictionary();
      private var _isDisposed:Boolean = false;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
         Utils_Dispose.disposeArray(_addedBottomButtonList, true);
         for (var o:Object in _index_AddedButtons_to_ClickHandlers) {
            var button:Button = Button(o);
            button.removeEventListener(MouseEvent.CLICK, _index_AddedButtons_to_ClickHandlers[button]);
         }
         Utils_Dispose.disposeDictionary(_index_AddedButtons_to_ClickHandlers, false);
      }

      override public function doGoBack():void {
         // For debugging...
         super.doGoBack();
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      protected function addButton(label:String, clickHandler:Function):void {
         var button:Button_Standard = new Button_Standard();
         button.label = label;
         button.visible = false;
         button.addEventListener(MouseEvent.CLICK, clickHandler);
         _addedBottomButtonList.push(button);
         _index_AddedButtons_to_ClickHandlers[button] = clickHandler;
      }

      override protected function createChildren():void {
         super.createChildren();
         for (var i:int = 0; i < _addedBottomButtonList.length; i++) {
            buttonGroup.addElementAt(_addedBottomButtonList[i], i);
         }
      }

      protected function goToNextScreen(transition:ViewTransitionBase = null):void {
         if (!transition) {
            // Override this method in subclass and pass in the appropriate transition
            Log.error("View_Base_BottomButtons.goToNextScreen(): No transition passed");
            return;
         }
         navigator.pushView(context.nextViewClass, null, null, transition);
      }

      protected function onPrimaryBottomButtonClick(event:MouseEvent):void {
         Log.info("View_Base_BottomButtons.onPrimaryBottomButtonClick(): View class: " + this.toString());
         if ((Utils_System.isRunningOnDesktop()) &&
               (event.shiftKey)) {
            onPrimaryBottomButtonShiftClick();
         }
         else if ((navigator.context is ViewContext) && (context.nextViewClass)) {
            goToNextScreen();
         }
         else {
            navigator.popView(transition_SlideView_Right);
         }
      }

      protected function onPrimaryBottomButtonShiftClick():void {
         // Subclasses can override this method
      }

      protected function onViewActivate():void {
         viewletGroup.visible = true;
         if (contextType != ViewContext.CONTEXT_TYPE__HELP) {
            callLater(displayButtons);
         }
      }

      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
         super.updateDisplayList(unscaledWidth, unscaledHeight);
         callLater(setViewletGroupScrollerHeight);
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function displayButtons():void {
         var buttonList:Array = [primaryBottomButton];
         for each (var button:Button in _addedBottomButtonList) {
            buttonList.push(button);
         }
         for each (button in buttonList) {
            button.visible = true;
            if (buttonList.length == 1)
               button.percentWidth = 60;
            else
               button.percentWidth = Math.round(80 / buttonList.length);
         }
         fadeEffect.play(buttonList);
      }

      private function onCreationComplete():void {
         if (contextType == ViewContext.CONTEXT_TYPE__HELP) {
            buttonContainer.visible = false;
            buttonContainer.includeInLayout = false;
         }
         viewletGroup.clipAndEnableScrolling = viewletGroup_Scrollable;
         if (viewletGroup_UsePadding) {
            var padding:int = Utils_Layout.getStandardPadding() * 2;
            viewletGroup.paddingLeft = padding;
            viewletGroup.paddingRight = padding;
            viewletGroup.paddingTop = padding;
         }
      }

      private function setViewletGroupScrollerHeight():void {
         if ((!viewletGroupScroller) || (!navigator) || (!navigator.actionBar))
            return;
         var h:int = height;
         if (buttonContainer.includeInLayout)
            h -= buttonContainer.height;
         viewletGroupScroller.height = h;
      }
      ]]>
    </fx:Script>

   <s:VGroup height = "100%"
             width = "100%">
      <s:Scroller id = "viewletGroupScroller"
                  horizontalScrollPolicy = "off"
                  skinClass = "com.brightworks.component.scroll.InitialFadeScrollerSkin"
                  height = "100%"
                  width = "100%">
         <s:VGroup id = "viewletGroup"
                   width = "100%"/>
      </s:Scroller>
      <s:BorderContainer id = "buttonContainer"
                         width = "100%"
                         backgroundColor = "0x8888CC"
                         bottom = "0">
         <s:layout>
            <s:HorizontalLayout horizontalAlign = "center"
                                paddingTop = "{Utils_Layout.getStandardPadding()}"
                                paddingBottom = "{Utils_Layout.getStandardPadding() + 4}"/>
         </s:layout>
         <s:HGroup id = "buttonGroup"
                   width = "100%"
                   horizontalAlign = "center">
            <!--
            I can't get doubleClick to work here - specifically in Send Problem Report - even though it works in intro views -
            this may be because the processor is much busier (downloading) in Send Problem Report.
            -->
            <button:Button_Standard id = "primaryBottomButton"
                                    label = "{BUTTON_LABEL__OK}"
                                    click = "onPrimaryBottomButtonClick(event)"
                                    visible = "false"
                                    width = "60%"/>
         </s:HGroup>
      </s:BorderContainer>
   </s:VGroup>
</view:View_Base>


















