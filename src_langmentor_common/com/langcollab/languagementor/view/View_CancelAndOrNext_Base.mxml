<?xml version = "1.0" encoding = "utf-8"?>
<!--
Copyright 2018 Brightworks, Inc.

This file is part of Language Mentor.

Language Mentor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Language Mentor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Language Mentor.  If not, see <http://www.gnu.org/licenses/>.
-->
<view:View_Base xmlns:fx = "http://ns.adobe.com/mxml/2009"
                xmlns:s = "library://ns.adobe.com/flex/spark"
                xmlns:button = "com.brightworks.component.button.*"
                xmlns:view = "com.langcollab.languagementor.view.*"
                creationComplete = "onCreationComplete()"
                viewActivate = "onViewActivate()">

   <fx:Declarations>
      <s:Fade id = "fadeEffect"
              alphaFrom = "0"
              alphaTo = "1"
              duration = "600"/>
   </fx:Declarations>


   <fx:Script>
      <![CDATA[
      import com.brightworks.util.Utils_Layout;

      private static const _BUTTON_WIDTH_PERCENT__DUAL_BUTTON:uint = 40;
      private static const _BUTTON_WIDTH_PERCENT__SINGLE_BUTTON:uint = 60;

      protected var isDisplayCancelButton:Boolean = false;
      protected var isDisplayNextButton:Boolean = true;
      protected var viewletGroup_Scrollable:Boolean = true;
      protected var viewletGroup_UsePadding:Boolean = true;

      private var _isDisposed:Boolean = false;

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Public Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      override public function dispose():void {
         super.dispose();
         if (_isDisposed)
            return;
         _isDisposed = true;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Protected Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      protected function onCancelButtonClick(event:MouseEvent):void {
         doGoBack();
      }

      protected function onNextButtonClick(event:MouseEvent):void {
         // Subclasses should override this method
      }

      protected function onNextButtonDoubleClick(event:MouseEvent):void {
         // Subclasses can override this method
         onNextButtonClick(event);
      }

      protected function onViewActivate():void {
         if (isDisplayCancelButton) {
            cancelButton.enabled = true;
         } else {
            cancelButton.includeInLayout = false;
         }
         if (isDisplayNextButton) {
            nextButton.enabled = true;
         } else {
            nextButton.includeInLayout = false;
         }
         callLater(displayButtons);
      }

      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
         super.updateDisplayList(unscaledWidth, unscaledHeight);
         viewletGroup.height =
               unscaledHeight - buttonContainer.height;
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      //
      //          Private Methods
      //
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      private function displayButtons():void {
         var buttonList:Array = [];
         if (isDisplayCancelButton) {
            cancelButton.visible = true;
            cancelButton.percentWidth = isDisplayNextButton ? _BUTTON_WIDTH_PERCENT__DUAL_BUTTON : _BUTTON_WIDTH_PERCENT__SINGLE_BUTTON;
            buttonList.push(cancelButton);
         }
         if (isDisplayNextButton) {
            nextButton.visible = true;
            nextButton.percentWidth = isDisplayCancelButton ? _BUTTON_WIDTH_PERCENT__DUAL_BUTTON : _BUTTON_WIDTH_PERCENT__SINGLE_BUTTON;
            buttonList.push(nextButton);
         }
         fadeEffect.play(buttonList);
      }

      private function onCreationComplete():void {
         viewletGroup.clipAndEnableScrolling = viewletGroup_Scrollable;
         if (viewletGroup_UsePadding) {
            var padding:int = Utils_Layout.getStandardPadding() * 2;
            viewletGroup.paddingLeft = padding;
            viewletGroup.paddingRight = padding;
            viewletGroup.paddingTop = padding;
         }
      }
      ]]>
   </fx:Script>

   <s:VGroup height = "100%"
             width = "100%">
      <s:Scroller id = "viewletGroupScroller"
                  horizontalScrollPolicy = "off"
                  skinClass = "com.brightworks.component.scroll.InitialFadeScrollerSkin"
                  height = "100%"
                  width = "100%">
         <s:VGroup id = "viewletGroup"
                   width = "100%"/>
      </s:Scroller>
      <s:BorderContainer id = "buttonContainer"
                         width = "100%"
                         backgroundColor = "0x333333">
         <s:layout>
            <s:HorizontalLayout horizontalAlign = "center"
                                paddingTop = "{Utils_Layout.getStandardPadding()}"
                                paddingBottom = "{Utils_Layout.getStandardPadding() + 4}"/>
         </s:layout>
         <button:NormalButton id = "cancelButton"
                              label = "Cancel"
                              enabled = "false"
                              visible = "false"
                              click = "onCancelButtonClick(event)"/>
         <button:NormalButton id = "nextButton"
                              label = "Next"
                              enabled = "false"
                              visible = "false"
                              click = "onNextButtonClick(event)"
                              doubleClick = "onNextButtonDoubleClick(event)"
                              doubleClickEnabled = "true"/>
      </s:BorderContainer>
   </s:VGroup>
</view:View_Base>






















